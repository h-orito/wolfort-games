package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	graph1 "wolfort-games/middleware/graph"
	"wolfort-games/middleware/graph/gqlmodel"
)

// Participants is the resolver for the participants field.
func (r *chinchiroGameResolver) Participants(ctx context.Context, obj *gqlmodel.ChinchiroGame) ([]*gqlmodel.ChinchiroGameParticipant, error) {
	return r.participants(ctx, obj)
}

// Turns is the resolver for the turns field.
func (r *chinchiroGameResolver) Turns(ctx context.Context, obj *gqlmodel.ChinchiroGame) ([]*gqlmodel.ChinchiroGameTurn, error) {
	return r.turns(ctx, obj)
}

// RoomParticipant is the resolver for the roomParticipant field.
func (r *chinchiroGameParticipantResolver) RoomParticipant(ctx context.Context, obj *gqlmodel.ChinchiroGameParticipant) (*gqlmodel.ChinchiroRoomParticipant, error) {
	return r.roomParticipant(ctx, obj)
}

// Dealer is the resolver for the dealer field.
func (r *chinchiroGameTurnResolver) Dealer(ctx context.Context, obj *gqlmodel.ChinchiroGameTurn) (*gqlmodel.ChinchiroGameParticipant, error) {
	return r.dealer(ctx, obj)
}

// NextRoller is the resolver for the nextRoller field.
func (r *chinchiroGameTurnResolver) NextRoller(ctx context.Context, obj *gqlmodel.ChinchiroGameTurn) (*gqlmodel.ChinchiroGameParticipant, error) {
	return r.nextRoller(ctx, obj)
}

// Rolls is the resolver for the rolls field.
func (r *chinchiroGameTurnResolver) Rolls(ctx context.Context, obj *gqlmodel.ChinchiroGameTurn) ([]*gqlmodel.ChinchiroGameTurnParticipantRoll, error) {
	return r.rolls(ctx, obj)
}

// Results is the resolver for the results field.
func (r *chinchiroGameTurnResolver) Results(ctx context.Context, obj *gqlmodel.ChinchiroGameTurn) ([]*gqlmodel.ChinchiroGameTurnParticipantResult, error) {
	return r.results(ctx, obj)
}

// Turn is the resolver for the turn field.
func (r *chinchiroGameTurnParticipantResultResolver) Turn(ctx context.Context, obj *gqlmodel.ChinchiroGameTurnParticipantResult) (*gqlmodel.ChinchiroGameTurn, error) {
	return r.turn(ctx, obj)
}

// Participant is the resolver for the participant field.
func (r *chinchiroGameTurnParticipantResultResolver) Participant(ctx context.Context, obj *gqlmodel.ChinchiroGameTurnParticipantResult) (*gqlmodel.ChinchiroGameParticipant, error) {
	return r.participant(ctx, obj)
}

// Turn is the resolver for the turn field.
func (r *chinchiroGameTurnParticipantRollResolver) Turn(ctx context.Context, obj *gqlmodel.ChinchiroGameTurnParticipantRoll) (*gqlmodel.ChinchiroGameTurn, error) {
	return r.turn(ctx, obj)
}

// Participant is the resolver for the participant field.
func (r *chinchiroGameTurnParticipantRollResolver) Participant(ctx context.Context, obj *gqlmodel.ChinchiroGameTurnParticipantRoll) (*gqlmodel.ChinchiroGameParticipant, error) {
	return r.participant(ctx, obj)
}

// RoomMasters is the resolver for the roomMasters field.
func (r *chinchiroRoomResolver) RoomMasters(ctx context.Context, obj *gqlmodel.ChinchiroRoom) ([]*gqlmodel.ChinchiroRoomMaster, error) {
	return r.roomMasters(ctx, obj)
}

// Participants is the resolver for the participants field.
func (r *chinchiroRoomResolver) Participants(ctx context.Context, obj *gqlmodel.ChinchiroRoom) ([]*gqlmodel.ChinchiroRoomParticipant, error) {
	return r.participants(ctx, obj)
}

// Games is the resolver for the games field.
func (r *chinchiroRoomResolver) Games(ctx context.Context, obj *gqlmodel.ChinchiroRoom) ([]*gqlmodel.ChinchiroGame, error) {
	return r.games(ctx, obj)
}

// Player is the resolver for the player field.
func (r *chinchiroRoomMasterResolver) Player(ctx context.Context, obj *gqlmodel.ChinchiroRoomMaster) (*gqlmodel.Player, error) {
	return r.player(ctx, obj)
}

// Player is the resolver for the player field.
func (r *chinchiroRoomParticipantResolver) Player(ctx context.Context, obj *gqlmodel.ChinchiroRoomParticipant) (*gqlmodel.Player, error) {
	return r.player(ctx, obj)
}

// RegisterChinchiroRoom is the resolver for the registerChinchiroRoom field.
func (r *mutationResolver) RegisterChinchiroRoom(ctx context.Context, input gqlmodel.NewChinchiroRoom) (*gqlmodel.RegisterChinchiroRoomPayload, error) {
	return r.registerChinchiroRoom(ctx, input)
}

// RegisterChinchiroRoomMaster is the resolver for the registerChinchiroRoomMaster field.
func (r *mutationResolver) RegisterChinchiroRoomMaster(ctx context.Context, input gqlmodel.NewChinchiroRoomMaster) (*gqlmodel.RegisterChinchiroRoomMasterPayload, error) {
	return r.registerChinchiroRoomMaster(ctx, input)
}

// DeleteChinchiroRoomMaster is the resolver for the deleteChinchiroRoomMaster field.
func (r *mutationResolver) DeleteChinchiroRoomMaster(ctx context.Context, input gqlmodel.DeleteChinchiroRoomMaster) (*gqlmodel.DeleteChinchiroRoomMasterPayload, error) {
	return r.deleteChinchiroRoomMaster(ctx, input)
}

// UpdateChinchiroRoomStatus is the resolver for the updateChinchiroRoomStatus field.
func (r *mutationResolver) UpdateChinchiroRoomStatus(ctx context.Context, input gqlmodel.UpdateChinchiroRoomStatus) (*gqlmodel.UpdateChinchiroRoomStatusPayload, error) {
	return r.updateChinchiroRoomStatus(ctx, input)
}

// UpdateChinchiroRoomSettings is the resolver for the updateChinchiroRoomSettings field.
func (r *mutationResolver) UpdateChinchiroRoomSettings(ctx context.Context, input gqlmodel.UpdateChinchiroRoomSettings) (*gqlmodel.UpdateChinchiroRoomSettingsPayload, error) {
	return r.updateChinchiroRoomSettings(ctx, input)
}

// RegisterChinchiroRoomParticipant is the resolver for the registerChinchiroRoomParticipant field.
func (r *mutationResolver) RegisterChinchiroRoomParticipant(ctx context.Context, input gqlmodel.NewChinchiroRoomParticipant) (*gqlmodel.RegisterChinchiroRoomParticipantPayload, error) {
	return r.registerChinchiroRoomParticipant(ctx, input)
}

// UpdateChinchiroRoomParticipant is the resolver for the updateChinchiroRoomParticipant field.
func (r *mutationResolver) UpdateChinchiroRoomParticipant(ctx context.Context, input gqlmodel.UpdateChinchiroRoomParticipant) (*gqlmodel.UpdateChinchiroRoomParticipantPayload, error) {
	return r.updateChinchiroRoomParticipant(ctx, input)
}

// LeaveChinchiroRoom is the resolver for the leaveChinchiroRoom field.
func (r *mutationResolver) LeaveChinchiroRoom(ctx context.Context, input gqlmodel.LeaveChinchiroRoom) (*gqlmodel.LeaveChinchiroRoomPayload, error) {
	return r.leaveChinchiroRoom(ctx, input)
}

// DeleteChinchiroRoomParticipant is the resolver for the deleteChinchiroRoomParticipant field.
func (r *mutationResolver) DeleteChinchiroRoomParticipant(ctx context.Context, input gqlmodel.DeleteChinchiroRoomParticipant) (*gqlmodel.DeleteChinchiroRoomParticipantPayload, error) {
	return r.deleteChinchiroRoomParticipant(ctx, input)
}

// RegisterChinchiroGame is the resolver for the registerChinchiroGame field.
func (r *mutationResolver) RegisterChinchiroGame(ctx context.Context, input gqlmodel.NewChinchiroGame) (*gqlmodel.RegisterChinchiroGamePayload, error) {
	return r.registerChinchiroGame(ctx, input)
}

// UpdateChinchiroGameTurnStatus is the resolver for the updateChinchiroGameTurnStatus field.
func (r *mutationResolver) UpdateChinchiroGameTurnStatus(ctx context.Context, input gqlmodel.UpdateChinchiroGameTurnStatus) (*gqlmodel.UpdateChinchiroGameTurnStatusPayload, error) {
	return r.updateChinchiroGameTurnStatus(ctx, input)
}

// BetChinchiroGameTurnParticipant is the resolver for the betChinchiroGameTurnParticipant field.
func (r *mutationResolver) BetChinchiroGameTurnParticipant(ctx context.Context, input gqlmodel.BetChinchiroGameTurnParticipant) (*gqlmodel.BetChinchiroGameTurnParticipantPayload, error) {
	return r.betChinchiroGameTurnParticipant(ctx, input)
}

// RollChinchiroGameTurnParticipant is the resolver for the rollChinchiroGameTurnParticipant field.
func (r *mutationResolver) RollChinchiroGameTurnParticipant(ctx context.Context, input gqlmodel.RollChinchiroGameTurnParticipant) (*gqlmodel.RollChinchiroGameTurnParticipantPayload, error) {
	return r.rollChinchiroGameTurnParticipant(ctx, input)
}

// Players is the resolver for the players field.
func (r *queryResolver) Players(ctx context.Context, query gqlmodel.PlayersQuery) ([]*gqlmodel.Player, error) {
	return r.players(ctx, query)
}

// Player is the resolver for the player field.
func (r *queryResolver) Player(ctx context.Context, id string) (*gqlmodel.Player, error) {
	return r.player(ctx, id)
}

// MyPlayer is the resolver for the myPlayer field.
func (r *queryResolver) MyPlayer(ctx context.Context) (*gqlmodel.Player, error) {
	return r.myPlayer(ctx)
}

// ChinchiroRooms is the resolver for the chinchiroRooms field.
func (r *queryResolver) ChinchiroRooms(ctx context.Context, query gqlmodel.ChinchiroRoomsQuery) ([]*gqlmodel.SimpleChinchiroRoom, error) {
	return r.chinchiroRooms(ctx, query)
}

// ChinchiroRoom is the resolver for the chinchiroRoom field.
func (r *queryResolver) ChinchiroRoom(ctx context.Context, roomID string) (*gqlmodel.ChinchiroRoom, error) {
	return r.chinchiroRoom(ctx, roomID)
}

// MyChinchiroRoomParticipant is the resolver for the myChinchiroRoomParticipant field.
func (r *queryResolver) MyChinchiroRoomParticipant(ctx context.Context, roomID string) (*gqlmodel.ChinchiroRoomParticipant, error) {
	return r.myChinchiroRoomParticipant(ctx, roomID)
}

// ChinchiroGames is the resolver for the chinchiroGames field.
func (r *queryResolver) ChinchiroGames(ctx context.Context, query gqlmodel.ChinchiroGamesQuery) ([]*gqlmodel.ChinchiroGame, error) {
	return r.chinchiroGames(ctx, query)
}

// ChinchiroGame is the resolver for the chinchiroGame field.
func (r *queryResolver) ChinchiroGame(ctx context.Context, gameID string) (*gqlmodel.ChinchiroGame, error) {
	return r.chinchiroGame(ctx, gameID)
}

// MyChinchiroGameParticipant is the resolver for the myChinchiroGameParticipant field.
func (r *queryResolver) MyChinchiroGameParticipant(ctx context.Context, gameID string) (*gqlmodel.ChinchiroGameParticipant, error) {
	return r.myChinchiroGameParticipant(ctx, gameID)
}

// ChinchiroGameTurns is the resolver for the chinchiroGameTurns field.
func (r *queryResolver) ChinchiroGameTurns(ctx context.Context, query gqlmodel.ChinchiroGameTurnsQuery) ([]*gqlmodel.ChinchiroGameTurn, error) {
	return r.chinchiroGameTurns(ctx, query)
}

// ChinchiroGameTurn is the resolver for the chinchiroGameTurn field.
func (r *queryResolver) ChinchiroGameTurn(ctx context.Context, turnID string) (*gqlmodel.ChinchiroGameTurn, error) {
	return r.chinchiroGameTurn(ctx, turnID)
}

// ChinchiroGameTurnRolls is the resolver for the chinchiroGameTurnRolls field.
func (r *queryResolver) ChinchiroGameTurnRolls(ctx context.Context, query *gqlmodel.ChinchiroGameTurnRollsQuery) ([]*gqlmodel.ChinchiroGameTurnParticipantRoll, error) {
	return r.chinchiroGameTurnRolls(ctx, query)
}

// ChinchiroGameTurnParticipantResults is the resolver for the chinchiroGameTurnParticipantResults field.
func (r *queryResolver) ChinchiroGameTurnParticipantResults(ctx context.Context, query gqlmodel.ChinchiroGameTurnParticipantResultsQuery) ([]*gqlmodel.ChinchiroGameTurnParticipantResult, error) {
	return r.chinchiroGameTurnParticipantResults(ctx, query)
}

// ChinchiroGame returns graph1.ChinchiroGameResolver implementation.
func (r *Resolver) ChinchiroGame() graph1.ChinchiroGameResolver { return &chinchiroGameResolver{r} }

// ChinchiroGameParticipant returns graph1.ChinchiroGameParticipantResolver implementation.
func (r *Resolver) ChinchiroGameParticipant() graph1.ChinchiroGameParticipantResolver {
	return &chinchiroGameParticipantResolver{r}
}

// ChinchiroGameTurn returns graph1.ChinchiroGameTurnResolver implementation.
func (r *Resolver) ChinchiroGameTurn() graph1.ChinchiroGameTurnResolver {
	return &chinchiroGameTurnResolver{r}
}

// ChinchiroGameTurnParticipantResult returns graph1.ChinchiroGameTurnParticipantResultResolver implementation.
func (r *Resolver) ChinchiroGameTurnParticipantResult() graph1.ChinchiroGameTurnParticipantResultResolver {
	return &chinchiroGameTurnParticipantResultResolver{r}
}

// ChinchiroGameTurnParticipantRoll returns graph1.ChinchiroGameTurnParticipantRollResolver implementation.
func (r *Resolver) ChinchiroGameTurnParticipantRoll() graph1.ChinchiroGameTurnParticipantRollResolver {
	return &chinchiroGameTurnParticipantRollResolver{r}
}

// ChinchiroRoom returns graph1.ChinchiroRoomResolver implementation.
func (r *Resolver) ChinchiroRoom() graph1.ChinchiroRoomResolver { return &chinchiroRoomResolver{r} }

// ChinchiroRoomMaster returns graph1.ChinchiroRoomMasterResolver implementation.
func (r *Resolver) ChinchiroRoomMaster() graph1.ChinchiroRoomMasterResolver {
	return &chinchiroRoomMasterResolver{r}
}

// ChinchiroRoomParticipant returns graph1.ChinchiroRoomParticipantResolver implementation.
func (r *Resolver) ChinchiroRoomParticipant() graph1.ChinchiroRoomParticipantResolver {
	return &chinchiroRoomParticipantResolver{r}
}

// Mutation returns graph1.MutationResolver implementation.
func (r *Resolver) Mutation() graph1.MutationResolver { return &mutationResolver{r} }

// Query returns graph1.QueryResolver implementation.
func (r *Resolver) Query() graph1.QueryResolver { return &queryResolver{r} }

type chinchiroGameResolver struct{ *Resolver }
type chinchiroGameParticipantResolver struct{ *Resolver }
type chinchiroGameTurnResolver struct{ *Resolver }
type chinchiroGameTurnParticipantResultResolver struct{ *Resolver }
type chinchiroGameTurnParticipantRollResolver struct{ *Resolver }
type chinchiroRoomResolver struct{ *Resolver }
type chinchiroRoomMasterResolver struct{ *Resolver }
type chinchiroRoomParticipantResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
