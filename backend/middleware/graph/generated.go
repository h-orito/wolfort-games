// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"wolfort-games/middleware/graph/gqlmodel"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	ChinchiroGame() ChinchiroGameResolver
	ChinchiroGameParticipant() ChinchiroGameParticipantResolver
	ChinchiroGameTurn() ChinchiroGameTurnResolver
	ChinchiroGameTurnParticipantResult() ChinchiroGameTurnParticipantResultResolver
	ChinchiroGameTurnParticipantRoll() ChinchiroGameTurnParticipantRollResolver
	ChinchiroRoom() ChinchiroRoomResolver
	ChinchiroRoomMaster() ChinchiroRoomMasterResolver
	ChinchiroRoomParticipant() ChinchiroRoomParticipantResolver
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	IsAuthenticated func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	BetChinchiroGameTurnParticipantPayload struct {
		Ok func(childComplexity int) int
	}

	ChinchiroGame struct {
		ID           func(childComplexity int) int
		Participants func(childComplexity int) int
		Status       func(childComplexity int) int
		Turns        func(childComplexity int) int
	}

	ChinchiroGameParticipant struct {
		Balance         func(childComplexity int) int
		ID              func(childComplexity int) int
		RoomParticipant func(childComplexity int) int
		TurnOrder       func(childComplexity int) int
	}

	ChinchiroGameTurn struct {
		Dealer     func(childComplexity int) int
		ID         func(childComplexity int) int
		NextRoller func(childComplexity int) int
		Results    func(childComplexity int) int
		Rolls      func(childComplexity int) int
		Status     func(childComplexity int) int
		TurnNumber func(childComplexity int) int
	}

	ChinchiroGameTurnParticipantResult struct {
		Combination func(childComplexity int) int
		Dice1       func(childComplexity int) int
		Dice2       func(childComplexity int) int
		Dice3       func(childComplexity int) int
		ID          func(childComplexity int) int
		Participant func(childComplexity int) int
		Turn        func(childComplexity int) int
		Winnings    func(childComplexity int) int
	}

	ChinchiroGameTurnParticipantRoll struct {
		Dice1       func(childComplexity int) int
		Dice2       func(childComplexity int) int
		Dice3       func(childComplexity int) int
		ID          func(childComplexity int) int
		Participant func(childComplexity int) int
		RollNumber  func(childComplexity int) int
		Turn        func(childComplexity int) int
	}

	ChinchiroRoom struct {
		Games        func(childComplexity int) int
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		Participants func(childComplexity int) int
		RoomMasters  func(childComplexity int) int
		Settings     func(childComplexity int) int
		Status       func(childComplexity int) int
	}

	ChinchiroRoomMaster struct {
		ID     func(childComplexity int) int
		Player func(childComplexity int) int
	}

	ChinchiroRoomParticipant struct {
		ID     func(childComplexity int) int
		IsGone func(childComplexity int) int
		Name   func(childComplexity int) int
		Player func(childComplexity int) int
	}

	ChinchiroRoomSettings struct {
		Dummy func(childComplexity int) int
	}

	DeleteChinchiroRoomMasterPayload struct {
		Ok func(childComplexity int) int
	}

	DeleteChinchiroRoomParticipantPayload struct {
		Ok func(childComplexity int) int
	}

	LeaveChinchiroRoomPayload struct {
		Ok func(childComplexity int) int
	}

	Mutation struct {
		BetChinchiroGameTurnParticipant  func(childComplexity int, input gqlmodel.BetChinchiroGameTurnParticipant) int
		DeleteChinchiroRoomMaster        func(childComplexity int, input gqlmodel.DeleteChinchiroRoomMaster) int
		DeleteChinchiroRoomParticipant   func(childComplexity int, input gqlmodel.DeleteChinchiroRoomParticipant) int
		LeaveChinchiroRoom               func(childComplexity int, input gqlmodel.LeaveChinchiroRoom) int
		RegisterChinchiroGame            func(childComplexity int, input gqlmodel.NewChinchiroGame) int
		RegisterChinchiroRoom            func(childComplexity int, input gqlmodel.NewChinchiroRoom) int
		RegisterChinchiroRoomMaster      func(childComplexity int, input gqlmodel.NewChinchiroRoomMaster) int
		RegisterChinchiroRoomParticipant func(childComplexity int, input gqlmodel.NewChinchiroRoomParticipant) int
		RollChinchiroGameTurnParticipant func(childComplexity int, input gqlmodel.RollChinchiroGameTurnParticipant) int
		UpdateChinchiroGameTurnStatus    func(childComplexity int, input gqlmodel.UpdateChinchiroGameTurnStatus) int
		UpdateChinchiroRoomParticipant   func(childComplexity int, input gqlmodel.UpdateChinchiroRoomParticipant) int
		UpdateChinchiroRoomSettings      func(childComplexity int, input gqlmodel.UpdateChinchiroRoomSettings) int
		UpdateChinchiroRoomStatus        func(childComplexity int, input gqlmodel.UpdateChinchiroRoomStatus) int
	}

	Player struct {
		AuthorityCodes func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
	}

	Query struct {
		ChinchiroGame                       func(childComplexity int, gameID string) int
		ChinchiroGameTurn                   func(childComplexity int, turnID string) int
		ChinchiroGameTurnParticipantResults func(childComplexity int, query gqlmodel.ChinchiroGameTurnParticipantResultsQuery) int
		ChinchiroGameTurnRolls              func(childComplexity int, query *gqlmodel.ChinchiroGameTurnRollsQuery) int
		ChinchiroGameTurns                  func(childComplexity int, query gqlmodel.ChinchiroGameTurnsQuery) int
		ChinchiroGames                      func(childComplexity int, query gqlmodel.ChinchiroGamesQuery) int
		ChinchiroRoom                       func(childComplexity int, roomID string) int
		ChinchiroRooms                      func(childComplexity int, query gqlmodel.ChinchiroRoomsQuery) int
		MyChinchiroGameParticipant          func(childComplexity int, gameID string) int
		MyChinchiroRoomParticipant          func(childComplexity int, roomID string) int
		MyPlayer                            func(childComplexity int) int
		Player                              func(childComplexity int, id string) int
		Players                             func(childComplexity int, query gqlmodel.PlayersQuery) int
	}

	RegisterChinchiroGamePayload struct {
		ChinchiroGame func(childComplexity int) int
	}

	RegisterChinchiroRoomMasterPayload struct {
		ChinchiroRoomMaster func(childComplexity int) int
	}

	RegisterChinchiroRoomParticipantPayload struct {
		ChinchiroRoomParticipant func(childComplexity int) int
	}

	RegisterChinchiroRoomPayload struct {
		ChinchiroRoom func(childComplexity int) int
	}

	RollChinchiroGameTurnParticipantPayload struct {
		Ok func(childComplexity int) int
	}

	SimpleChinchiroRoom struct {
		ID                func(childComplexity int) int
		Name              func(childComplexity int) int
		ParticipantCounts func(childComplexity int) int
		Settings          func(childComplexity int) int
		Status            func(childComplexity int) int
	}

	UpdateChinchiroGameTurnStatusPayload struct {
		Ok func(childComplexity int) int
	}

	UpdateChinchiroRoomParticipantPayload struct {
		Ok func(childComplexity int) int
	}

	UpdateChinchiroRoomSettingsPayload struct {
		Ok func(childComplexity int) int
	}

	UpdateChinchiroRoomStatusPayload struct {
		Ok func(childComplexity int) int
	}
}

type ChinchiroGameResolver interface {
	Participants(ctx context.Context, obj *gqlmodel.ChinchiroGame) ([]*gqlmodel.ChinchiroGameParticipant, error)
	Turns(ctx context.Context, obj *gqlmodel.ChinchiroGame) ([]*gqlmodel.ChinchiroGameTurn, error)
}
type ChinchiroGameParticipantResolver interface {
	RoomParticipant(ctx context.Context, obj *gqlmodel.ChinchiroGameParticipant) (*gqlmodel.ChinchiroRoomParticipant, error)
}
type ChinchiroGameTurnResolver interface {
	Dealer(ctx context.Context, obj *gqlmodel.ChinchiroGameTurn) (*gqlmodel.ChinchiroGameParticipant, error)
	NextRoller(ctx context.Context, obj *gqlmodel.ChinchiroGameTurn) (*gqlmodel.ChinchiroGameParticipant, error)

	Rolls(ctx context.Context, obj *gqlmodel.ChinchiroGameTurn) ([]*gqlmodel.ChinchiroGameTurnParticipantRoll, error)
	Results(ctx context.Context, obj *gqlmodel.ChinchiroGameTurn) ([]*gqlmodel.ChinchiroGameTurnParticipantResult, error)
}
type ChinchiroGameTurnParticipantResultResolver interface {
	Turn(ctx context.Context, obj *gqlmodel.ChinchiroGameTurnParticipantResult) (*gqlmodel.ChinchiroGameTurn, error)
	Participant(ctx context.Context, obj *gqlmodel.ChinchiroGameTurnParticipantResult) (*gqlmodel.ChinchiroGameParticipant, error)
}
type ChinchiroGameTurnParticipantRollResolver interface {
	Turn(ctx context.Context, obj *gqlmodel.ChinchiroGameTurnParticipantRoll) (*gqlmodel.ChinchiroGameTurn, error)
	Participant(ctx context.Context, obj *gqlmodel.ChinchiroGameTurnParticipantRoll) (*gqlmodel.ChinchiroGameParticipant, error)
}
type ChinchiroRoomResolver interface {
	RoomMasters(ctx context.Context, obj *gqlmodel.ChinchiroRoom) ([]*gqlmodel.ChinchiroRoomMaster, error)
	Participants(ctx context.Context, obj *gqlmodel.ChinchiroRoom) ([]*gqlmodel.ChinchiroRoomParticipant, error)
	Games(ctx context.Context, obj *gqlmodel.ChinchiroRoom) ([]*gqlmodel.ChinchiroGame, error)
}
type ChinchiroRoomMasterResolver interface {
	Player(ctx context.Context, obj *gqlmodel.ChinchiroRoomMaster) (*gqlmodel.Player, error)
}
type ChinchiroRoomParticipantResolver interface {
	Player(ctx context.Context, obj *gqlmodel.ChinchiroRoomParticipant) (*gqlmodel.Player, error)
}
type MutationResolver interface {
	RegisterChinchiroRoom(ctx context.Context, input gqlmodel.NewChinchiroRoom) (*gqlmodel.RegisterChinchiroRoomPayload, error)
	RegisterChinchiroRoomMaster(ctx context.Context, input gqlmodel.NewChinchiroRoomMaster) (*gqlmodel.RegisterChinchiroRoomMasterPayload, error)
	DeleteChinchiroRoomMaster(ctx context.Context, input gqlmodel.DeleteChinchiroRoomMaster) (*gqlmodel.DeleteChinchiroRoomMasterPayload, error)
	UpdateChinchiroRoomStatus(ctx context.Context, input gqlmodel.UpdateChinchiroRoomStatus) (*gqlmodel.UpdateChinchiroRoomStatusPayload, error)
	UpdateChinchiroRoomSettings(ctx context.Context, input gqlmodel.UpdateChinchiroRoomSettings) (*gqlmodel.UpdateChinchiroRoomSettingsPayload, error)
	RegisterChinchiroRoomParticipant(ctx context.Context, input gqlmodel.NewChinchiroRoomParticipant) (*gqlmodel.RegisterChinchiroRoomParticipantPayload, error)
	UpdateChinchiroRoomParticipant(ctx context.Context, input gqlmodel.UpdateChinchiroRoomParticipant) (*gqlmodel.UpdateChinchiroRoomParticipantPayload, error)
	LeaveChinchiroRoom(ctx context.Context, input gqlmodel.LeaveChinchiroRoom) (*gqlmodel.LeaveChinchiroRoomPayload, error)
	DeleteChinchiroRoomParticipant(ctx context.Context, input gqlmodel.DeleteChinchiroRoomParticipant) (*gqlmodel.DeleteChinchiroRoomParticipantPayload, error)
	RegisterChinchiroGame(ctx context.Context, input gqlmodel.NewChinchiroGame) (*gqlmodel.RegisterChinchiroGamePayload, error)
	UpdateChinchiroGameTurnStatus(ctx context.Context, input gqlmodel.UpdateChinchiroGameTurnStatus) (*gqlmodel.UpdateChinchiroGameTurnStatusPayload, error)
	BetChinchiroGameTurnParticipant(ctx context.Context, input gqlmodel.BetChinchiroGameTurnParticipant) (*gqlmodel.BetChinchiroGameTurnParticipantPayload, error)
	RollChinchiroGameTurnParticipant(ctx context.Context, input gqlmodel.RollChinchiroGameTurnParticipant) (*gqlmodel.RollChinchiroGameTurnParticipantPayload, error)
}
type QueryResolver interface {
	Players(ctx context.Context, query gqlmodel.PlayersQuery) ([]*gqlmodel.Player, error)
	Player(ctx context.Context, id string) (*gqlmodel.Player, error)
	MyPlayer(ctx context.Context) (*gqlmodel.Player, error)
	ChinchiroRooms(ctx context.Context, query gqlmodel.ChinchiroRoomsQuery) ([]*gqlmodel.SimpleChinchiroRoom, error)
	ChinchiroRoom(ctx context.Context, roomID string) (*gqlmodel.ChinchiroRoom, error)
	MyChinchiroRoomParticipant(ctx context.Context, roomID string) (*gqlmodel.ChinchiroRoomParticipant, error)
	ChinchiroGames(ctx context.Context, query gqlmodel.ChinchiroGamesQuery) ([]*gqlmodel.ChinchiroGame, error)
	ChinchiroGame(ctx context.Context, gameID string) (*gqlmodel.ChinchiroGame, error)
	MyChinchiroGameParticipant(ctx context.Context, gameID string) (*gqlmodel.ChinchiroGameParticipant, error)
	ChinchiroGameTurns(ctx context.Context, query gqlmodel.ChinchiroGameTurnsQuery) ([]*gqlmodel.ChinchiroGameTurn, error)
	ChinchiroGameTurn(ctx context.Context, turnID string) (*gqlmodel.ChinchiroGameTurn, error)
	ChinchiroGameTurnRolls(ctx context.Context, query *gqlmodel.ChinchiroGameTurnRollsQuery) ([]*gqlmodel.ChinchiroGameTurnParticipantRoll, error)
	ChinchiroGameTurnParticipantResults(ctx context.Context, query gqlmodel.ChinchiroGameTurnParticipantResultsQuery) ([]*gqlmodel.ChinchiroGameTurnParticipantResult, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "BetChinchiroGameTurnParticipantPayload.ok":
		if e.complexity.BetChinchiroGameTurnParticipantPayload.Ok == nil {
			break
		}

		return e.complexity.BetChinchiroGameTurnParticipantPayload.Ok(childComplexity), true

	case "ChinchiroGame.id":
		if e.complexity.ChinchiroGame.ID == nil {
			break
		}

		return e.complexity.ChinchiroGame.ID(childComplexity), true

	case "ChinchiroGame.participants":
		if e.complexity.ChinchiroGame.Participants == nil {
			break
		}

		return e.complexity.ChinchiroGame.Participants(childComplexity), true

	case "ChinchiroGame.status":
		if e.complexity.ChinchiroGame.Status == nil {
			break
		}

		return e.complexity.ChinchiroGame.Status(childComplexity), true

	case "ChinchiroGame.turns":
		if e.complexity.ChinchiroGame.Turns == nil {
			break
		}

		return e.complexity.ChinchiroGame.Turns(childComplexity), true

	case "ChinchiroGameParticipant.balance":
		if e.complexity.ChinchiroGameParticipant.Balance == nil {
			break
		}

		return e.complexity.ChinchiroGameParticipant.Balance(childComplexity), true

	case "ChinchiroGameParticipant.id":
		if e.complexity.ChinchiroGameParticipant.ID == nil {
			break
		}

		return e.complexity.ChinchiroGameParticipant.ID(childComplexity), true

	case "ChinchiroGameParticipant.roomParticipant":
		if e.complexity.ChinchiroGameParticipant.RoomParticipant == nil {
			break
		}

		return e.complexity.ChinchiroGameParticipant.RoomParticipant(childComplexity), true

	case "ChinchiroGameParticipant.turnOrder":
		if e.complexity.ChinchiroGameParticipant.TurnOrder == nil {
			break
		}

		return e.complexity.ChinchiroGameParticipant.TurnOrder(childComplexity), true

	case "ChinchiroGameTurn.dealer":
		if e.complexity.ChinchiroGameTurn.Dealer == nil {
			break
		}

		return e.complexity.ChinchiroGameTurn.Dealer(childComplexity), true

	case "ChinchiroGameTurn.id":
		if e.complexity.ChinchiroGameTurn.ID == nil {
			break
		}

		return e.complexity.ChinchiroGameTurn.ID(childComplexity), true

	case "ChinchiroGameTurn.nextRoller":
		if e.complexity.ChinchiroGameTurn.NextRoller == nil {
			break
		}

		return e.complexity.ChinchiroGameTurn.NextRoller(childComplexity), true

	case "ChinchiroGameTurn.results":
		if e.complexity.ChinchiroGameTurn.Results == nil {
			break
		}

		return e.complexity.ChinchiroGameTurn.Results(childComplexity), true

	case "ChinchiroGameTurn.rolls":
		if e.complexity.ChinchiroGameTurn.Rolls == nil {
			break
		}

		return e.complexity.ChinchiroGameTurn.Rolls(childComplexity), true

	case "ChinchiroGameTurn.status":
		if e.complexity.ChinchiroGameTurn.Status == nil {
			break
		}

		return e.complexity.ChinchiroGameTurn.Status(childComplexity), true

	case "ChinchiroGameTurn.turnNumber":
		if e.complexity.ChinchiroGameTurn.TurnNumber == nil {
			break
		}

		return e.complexity.ChinchiroGameTurn.TurnNumber(childComplexity), true

	case "ChinchiroGameTurnParticipantResult.combination":
		if e.complexity.ChinchiroGameTurnParticipantResult.Combination == nil {
			break
		}

		return e.complexity.ChinchiroGameTurnParticipantResult.Combination(childComplexity), true

	case "ChinchiroGameTurnParticipantResult.dice1":
		if e.complexity.ChinchiroGameTurnParticipantResult.Dice1 == nil {
			break
		}

		return e.complexity.ChinchiroGameTurnParticipantResult.Dice1(childComplexity), true

	case "ChinchiroGameTurnParticipantResult.dice2":
		if e.complexity.ChinchiroGameTurnParticipantResult.Dice2 == nil {
			break
		}

		return e.complexity.ChinchiroGameTurnParticipantResult.Dice2(childComplexity), true

	case "ChinchiroGameTurnParticipantResult.dice3":
		if e.complexity.ChinchiroGameTurnParticipantResult.Dice3 == nil {
			break
		}

		return e.complexity.ChinchiroGameTurnParticipantResult.Dice3(childComplexity), true

	case "ChinchiroGameTurnParticipantResult.id":
		if e.complexity.ChinchiroGameTurnParticipantResult.ID == nil {
			break
		}

		return e.complexity.ChinchiroGameTurnParticipantResult.ID(childComplexity), true

	case "ChinchiroGameTurnParticipantResult.participant":
		if e.complexity.ChinchiroGameTurnParticipantResult.Participant == nil {
			break
		}

		return e.complexity.ChinchiroGameTurnParticipantResult.Participant(childComplexity), true

	case "ChinchiroGameTurnParticipantResult.turn":
		if e.complexity.ChinchiroGameTurnParticipantResult.Turn == nil {
			break
		}

		return e.complexity.ChinchiroGameTurnParticipantResult.Turn(childComplexity), true

	case "ChinchiroGameTurnParticipantResult.winnings":
		if e.complexity.ChinchiroGameTurnParticipantResult.Winnings == nil {
			break
		}

		return e.complexity.ChinchiroGameTurnParticipantResult.Winnings(childComplexity), true

	case "ChinchiroGameTurnParticipantRoll.dice1":
		if e.complexity.ChinchiroGameTurnParticipantRoll.Dice1 == nil {
			break
		}

		return e.complexity.ChinchiroGameTurnParticipantRoll.Dice1(childComplexity), true

	case "ChinchiroGameTurnParticipantRoll.dice2":
		if e.complexity.ChinchiroGameTurnParticipantRoll.Dice2 == nil {
			break
		}

		return e.complexity.ChinchiroGameTurnParticipantRoll.Dice2(childComplexity), true

	case "ChinchiroGameTurnParticipantRoll.dice3":
		if e.complexity.ChinchiroGameTurnParticipantRoll.Dice3 == nil {
			break
		}

		return e.complexity.ChinchiroGameTurnParticipantRoll.Dice3(childComplexity), true

	case "ChinchiroGameTurnParticipantRoll.id":
		if e.complexity.ChinchiroGameTurnParticipantRoll.ID == nil {
			break
		}

		return e.complexity.ChinchiroGameTurnParticipantRoll.ID(childComplexity), true

	case "ChinchiroGameTurnParticipantRoll.participant":
		if e.complexity.ChinchiroGameTurnParticipantRoll.Participant == nil {
			break
		}

		return e.complexity.ChinchiroGameTurnParticipantRoll.Participant(childComplexity), true

	case "ChinchiroGameTurnParticipantRoll.rollNumber":
		if e.complexity.ChinchiroGameTurnParticipantRoll.RollNumber == nil {
			break
		}

		return e.complexity.ChinchiroGameTurnParticipantRoll.RollNumber(childComplexity), true

	case "ChinchiroGameTurnParticipantRoll.turn":
		if e.complexity.ChinchiroGameTurnParticipantRoll.Turn == nil {
			break
		}

		return e.complexity.ChinchiroGameTurnParticipantRoll.Turn(childComplexity), true

	case "ChinchiroRoom.games":
		if e.complexity.ChinchiroRoom.Games == nil {
			break
		}

		return e.complexity.ChinchiroRoom.Games(childComplexity), true

	case "ChinchiroRoom.id":
		if e.complexity.ChinchiroRoom.ID == nil {
			break
		}

		return e.complexity.ChinchiroRoom.ID(childComplexity), true

	case "ChinchiroRoom.name":
		if e.complexity.ChinchiroRoom.Name == nil {
			break
		}

		return e.complexity.ChinchiroRoom.Name(childComplexity), true

	case "ChinchiroRoom.participants":
		if e.complexity.ChinchiroRoom.Participants == nil {
			break
		}

		return e.complexity.ChinchiroRoom.Participants(childComplexity), true

	case "ChinchiroRoom.roomMasters":
		if e.complexity.ChinchiroRoom.RoomMasters == nil {
			break
		}

		return e.complexity.ChinchiroRoom.RoomMasters(childComplexity), true

	case "ChinchiroRoom.settings":
		if e.complexity.ChinchiroRoom.Settings == nil {
			break
		}

		return e.complexity.ChinchiroRoom.Settings(childComplexity), true

	case "ChinchiroRoom.status":
		if e.complexity.ChinchiroRoom.Status == nil {
			break
		}

		return e.complexity.ChinchiroRoom.Status(childComplexity), true

	case "ChinchiroRoomMaster.id":
		if e.complexity.ChinchiroRoomMaster.ID == nil {
			break
		}

		return e.complexity.ChinchiroRoomMaster.ID(childComplexity), true

	case "ChinchiroRoomMaster.player":
		if e.complexity.ChinchiroRoomMaster.Player == nil {
			break
		}

		return e.complexity.ChinchiroRoomMaster.Player(childComplexity), true

	case "ChinchiroRoomParticipant.id":
		if e.complexity.ChinchiroRoomParticipant.ID == nil {
			break
		}

		return e.complexity.ChinchiroRoomParticipant.ID(childComplexity), true

	case "ChinchiroRoomParticipant.isGone":
		if e.complexity.ChinchiroRoomParticipant.IsGone == nil {
			break
		}

		return e.complexity.ChinchiroRoomParticipant.IsGone(childComplexity), true

	case "ChinchiroRoomParticipant.name":
		if e.complexity.ChinchiroRoomParticipant.Name == nil {
			break
		}

		return e.complexity.ChinchiroRoomParticipant.Name(childComplexity), true

	case "ChinchiroRoomParticipant.player":
		if e.complexity.ChinchiroRoomParticipant.Player == nil {
			break
		}

		return e.complexity.ChinchiroRoomParticipant.Player(childComplexity), true

	case "ChinchiroRoomSettings.dummy":
		if e.complexity.ChinchiroRoomSettings.Dummy == nil {
			break
		}

		return e.complexity.ChinchiroRoomSettings.Dummy(childComplexity), true

	case "DeleteChinchiroRoomMasterPayload.ok":
		if e.complexity.DeleteChinchiroRoomMasterPayload.Ok == nil {
			break
		}

		return e.complexity.DeleteChinchiroRoomMasterPayload.Ok(childComplexity), true

	case "DeleteChinchiroRoomParticipantPayload.ok":
		if e.complexity.DeleteChinchiroRoomParticipantPayload.Ok == nil {
			break
		}

		return e.complexity.DeleteChinchiroRoomParticipantPayload.Ok(childComplexity), true

	case "LeaveChinchiroRoomPayload.ok":
		if e.complexity.LeaveChinchiroRoomPayload.Ok == nil {
			break
		}

		return e.complexity.LeaveChinchiroRoomPayload.Ok(childComplexity), true

	case "Mutation.betChinchiroGameTurnParticipant":
		if e.complexity.Mutation.BetChinchiroGameTurnParticipant == nil {
			break
		}

		args, err := ec.field_Mutation_betChinchiroGameTurnParticipant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BetChinchiroGameTurnParticipant(childComplexity, args["input"].(gqlmodel.BetChinchiroGameTurnParticipant)), true

	case "Mutation.deleteChinchiroRoomMaster":
		if e.complexity.Mutation.DeleteChinchiroRoomMaster == nil {
			break
		}

		args, err := ec.field_Mutation_deleteChinchiroRoomMaster_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteChinchiroRoomMaster(childComplexity, args["input"].(gqlmodel.DeleteChinchiroRoomMaster)), true

	case "Mutation.deleteChinchiroRoomParticipant":
		if e.complexity.Mutation.DeleteChinchiroRoomParticipant == nil {
			break
		}

		args, err := ec.field_Mutation_deleteChinchiroRoomParticipant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteChinchiroRoomParticipant(childComplexity, args["input"].(gqlmodel.DeleteChinchiroRoomParticipant)), true

	case "Mutation.leaveChinchiroRoom":
		if e.complexity.Mutation.LeaveChinchiroRoom == nil {
			break
		}

		args, err := ec.field_Mutation_leaveChinchiroRoom_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LeaveChinchiroRoom(childComplexity, args["input"].(gqlmodel.LeaveChinchiroRoom)), true

	case "Mutation.registerChinchiroGame":
		if e.complexity.Mutation.RegisterChinchiroGame == nil {
			break
		}

		args, err := ec.field_Mutation_registerChinchiroGame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterChinchiroGame(childComplexity, args["input"].(gqlmodel.NewChinchiroGame)), true

	case "Mutation.registerChinchiroRoom":
		if e.complexity.Mutation.RegisterChinchiroRoom == nil {
			break
		}

		args, err := ec.field_Mutation_registerChinchiroRoom_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterChinchiroRoom(childComplexity, args["input"].(gqlmodel.NewChinchiroRoom)), true

	case "Mutation.registerChinchiroRoomMaster":
		if e.complexity.Mutation.RegisterChinchiroRoomMaster == nil {
			break
		}

		args, err := ec.field_Mutation_registerChinchiroRoomMaster_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterChinchiroRoomMaster(childComplexity, args["input"].(gqlmodel.NewChinchiroRoomMaster)), true

	case "Mutation.registerChinchiroRoomParticipant":
		if e.complexity.Mutation.RegisterChinchiroRoomParticipant == nil {
			break
		}

		args, err := ec.field_Mutation_registerChinchiroRoomParticipant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterChinchiroRoomParticipant(childComplexity, args["input"].(gqlmodel.NewChinchiroRoomParticipant)), true

	case "Mutation.rollChinchiroGameTurnParticipant":
		if e.complexity.Mutation.RollChinchiroGameTurnParticipant == nil {
			break
		}

		args, err := ec.field_Mutation_rollChinchiroGameTurnParticipant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RollChinchiroGameTurnParticipant(childComplexity, args["input"].(gqlmodel.RollChinchiroGameTurnParticipant)), true

	case "Mutation.updateChinchiroGameTurnStatus":
		if e.complexity.Mutation.UpdateChinchiroGameTurnStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateChinchiroGameTurnStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChinchiroGameTurnStatus(childComplexity, args["input"].(gqlmodel.UpdateChinchiroGameTurnStatus)), true

	case "Mutation.updateChinchiroRoomParticipant":
		if e.complexity.Mutation.UpdateChinchiroRoomParticipant == nil {
			break
		}

		args, err := ec.field_Mutation_updateChinchiroRoomParticipant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChinchiroRoomParticipant(childComplexity, args["input"].(gqlmodel.UpdateChinchiroRoomParticipant)), true

	case "Mutation.updateChinchiroRoomSettings":
		if e.complexity.Mutation.UpdateChinchiroRoomSettings == nil {
			break
		}

		args, err := ec.field_Mutation_updateChinchiroRoomSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChinchiroRoomSettings(childComplexity, args["input"].(gqlmodel.UpdateChinchiroRoomSettings)), true

	case "Mutation.updateChinchiroRoomStatus":
		if e.complexity.Mutation.UpdateChinchiroRoomStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateChinchiroRoomStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChinchiroRoomStatus(childComplexity, args["input"].(gqlmodel.UpdateChinchiroRoomStatus)), true

	case "Player.authorityCodes":
		if e.complexity.Player.AuthorityCodes == nil {
			break
		}

		return e.complexity.Player.AuthorityCodes(childComplexity), true

	case "Player.id":
		if e.complexity.Player.ID == nil {
			break
		}

		return e.complexity.Player.ID(childComplexity), true

	case "Player.name":
		if e.complexity.Player.Name == nil {
			break
		}

		return e.complexity.Player.Name(childComplexity), true

	case "Query.chinchiroGame":
		if e.complexity.Query.ChinchiroGame == nil {
			break
		}

		args, err := ec.field_Query_chinchiroGame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChinchiroGame(childComplexity, args["gameId"].(string)), true

	case "Query.chinchiroGameTurn":
		if e.complexity.Query.ChinchiroGameTurn == nil {
			break
		}

		args, err := ec.field_Query_chinchiroGameTurn_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChinchiroGameTurn(childComplexity, args["turnId"].(string)), true

	case "Query.chinchiroGameTurnParticipantResults":
		if e.complexity.Query.ChinchiroGameTurnParticipantResults == nil {
			break
		}

		args, err := ec.field_Query_chinchiroGameTurnParticipantResults_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChinchiroGameTurnParticipantResults(childComplexity, args["query"].(gqlmodel.ChinchiroGameTurnParticipantResultsQuery)), true

	case "Query.chinchiroGameTurnRolls":
		if e.complexity.Query.ChinchiroGameTurnRolls == nil {
			break
		}

		args, err := ec.field_Query_chinchiroGameTurnRolls_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChinchiroGameTurnRolls(childComplexity, args["query"].(*gqlmodel.ChinchiroGameTurnRollsQuery)), true

	case "Query.chinchiroGameTurns":
		if e.complexity.Query.ChinchiroGameTurns == nil {
			break
		}

		args, err := ec.field_Query_chinchiroGameTurns_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChinchiroGameTurns(childComplexity, args["query"].(gqlmodel.ChinchiroGameTurnsQuery)), true

	case "Query.chinchiroGames":
		if e.complexity.Query.ChinchiroGames == nil {
			break
		}

		args, err := ec.field_Query_chinchiroGames_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChinchiroGames(childComplexity, args["query"].(gqlmodel.ChinchiroGamesQuery)), true

	case "Query.chinchiroRoom":
		if e.complexity.Query.ChinchiroRoom == nil {
			break
		}

		args, err := ec.field_Query_chinchiroRoom_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChinchiroRoom(childComplexity, args["roomId"].(string)), true

	case "Query.chinchiroRooms":
		if e.complexity.Query.ChinchiroRooms == nil {
			break
		}

		args, err := ec.field_Query_chinchiroRooms_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChinchiroRooms(childComplexity, args["query"].(gqlmodel.ChinchiroRoomsQuery)), true

	case "Query.myChinchiroGameParticipant":
		if e.complexity.Query.MyChinchiroGameParticipant == nil {
			break
		}

		args, err := ec.field_Query_myChinchiroGameParticipant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MyChinchiroGameParticipant(childComplexity, args["gameId"].(string)), true

	case "Query.myChinchiroRoomParticipant":
		if e.complexity.Query.MyChinchiroRoomParticipant == nil {
			break
		}

		args, err := ec.field_Query_myChinchiroRoomParticipant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MyChinchiroRoomParticipant(childComplexity, args["roomId"].(string)), true

	case "Query.myPlayer":
		if e.complexity.Query.MyPlayer == nil {
			break
		}

		return e.complexity.Query.MyPlayer(childComplexity), true

	case "Query.player":
		if e.complexity.Query.Player == nil {
			break
		}

		args, err := ec.field_Query_player_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Player(childComplexity, args["id"].(string)), true

	case "Query.players":
		if e.complexity.Query.Players == nil {
			break
		}

		args, err := ec.field_Query_players_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Players(childComplexity, args["query"].(gqlmodel.PlayersQuery)), true

	case "RegisterChinchiroGamePayload.chinchiroGame":
		if e.complexity.RegisterChinchiroGamePayload.ChinchiroGame == nil {
			break
		}

		return e.complexity.RegisterChinchiroGamePayload.ChinchiroGame(childComplexity), true

	case "RegisterChinchiroRoomMasterPayload.chinchiroRoomMaster":
		if e.complexity.RegisterChinchiroRoomMasterPayload.ChinchiroRoomMaster == nil {
			break
		}

		return e.complexity.RegisterChinchiroRoomMasterPayload.ChinchiroRoomMaster(childComplexity), true

	case "RegisterChinchiroRoomParticipantPayload.chinchiroRoomParticipant":
		if e.complexity.RegisterChinchiroRoomParticipantPayload.ChinchiroRoomParticipant == nil {
			break
		}

		return e.complexity.RegisterChinchiroRoomParticipantPayload.ChinchiroRoomParticipant(childComplexity), true

	case "RegisterChinchiroRoomPayload.chinchiroRoom":
		if e.complexity.RegisterChinchiroRoomPayload.ChinchiroRoom == nil {
			break
		}

		return e.complexity.RegisterChinchiroRoomPayload.ChinchiroRoom(childComplexity), true

	case "RollChinchiroGameTurnParticipantPayload.ok":
		if e.complexity.RollChinchiroGameTurnParticipantPayload.Ok == nil {
			break
		}

		return e.complexity.RollChinchiroGameTurnParticipantPayload.Ok(childComplexity), true

	case "SimpleChinchiroRoom.id":
		if e.complexity.SimpleChinchiroRoom.ID == nil {
			break
		}

		return e.complexity.SimpleChinchiroRoom.ID(childComplexity), true

	case "SimpleChinchiroRoom.name":
		if e.complexity.SimpleChinchiroRoom.Name == nil {
			break
		}

		return e.complexity.SimpleChinchiroRoom.Name(childComplexity), true

	case "SimpleChinchiroRoom.participantCounts":
		if e.complexity.SimpleChinchiroRoom.ParticipantCounts == nil {
			break
		}

		return e.complexity.SimpleChinchiroRoom.ParticipantCounts(childComplexity), true

	case "SimpleChinchiroRoom.settings":
		if e.complexity.SimpleChinchiroRoom.Settings == nil {
			break
		}

		return e.complexity.SimpleChinchiroRoom.Settings(childComplexity), true

	case "SimpleChinchiroRoom.status":
		if e.complexity.SimpleChinchiroRoom.Status == nil {
			break
		}

		return e.complexity.SimpleChinchiroRoom.Status(childComplexity), true

	case "UpdateChinchiroGameTurnStatusPayload.ok":
		if e.complexity.UpdateChinchiroGameTurnStatusPayload.Ok == nil {
			break
		}

		return e.complexity.UpdateChinchiroGameTurnStatusPayload.Ok(childComplexity), true

	case "UpdateChinchiroRoomParticipantPayload.ok":
		if e.complexity.UpdateChinchiroRoomParticipantPayload.Ok == nil {
			break
		}

		return e.complexity.UpdateChinchiroRoomParticipantPayload.Ok(childComplexity), true

	case "UpdateChinchiroRoomSettingsPayload.ok":
		if e.complexity.UpdateChinchiroRoomSettingsPayload.Ok == nil {
			break
		}

		return e.complexity.UpdateChinchiroRoomSettingsPayload.Ok(childComplexity), true

	case "UpdateChinchiroRoomStatusPayload.ok":
		if e.complexity.UpdateChinchiroRoomStatusPayload.Ok == nil {
			break
		}

		return e.complexity.UpdateChinchiroRoomStatusPayload.Ok(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputBetChinchiroGameTurnParticipant,
		ec.unmarshalInputChinchiroGameTurnParticipantResultsQuery,
		ec.unmarshalInputChinchiroGameTurnRollsQuery,
		ec.unmarshalInputChinchiroGameTurnsQuery,
		ec.unmarshalInputChinchiroGamesQuery,
		ec.unmarshalInputChinchiroRoomsQuery,
		ec.unmarshalInputDeleteChinchiroRoomMaster,
		ec.unmarshalInputDeleteChinchiroRoomParticipant,
		ec.unmarshalInputLeaveChinchiroRoom,
		ec.unmarshalInputNewChinchiroGame,
		ec.unmarshalInputNewChinchiroRoom,
		ec.unmarshalInputNewChinchiroRoomMaster,
		ec.unmarshalInputNewChinchiroRoomParticipant,
		ec.unmarshalInputPageableQuery,
		ec.unmarshalInputPlayersQuery,
		ec.unmarshalInputRollChinchiroGameTurnParticipant,
		ec.unmarshalInputUpdateChinchiroGameTurnStatus,
		ec.unmarshalInputUpdateChinchiroRoomParticipant,
		ec.unmarshalInputUpdateChinchiroRoomSettings,
		ec.unmarshalInputUpdateChinchiroRoomStatus,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../../graphql/schema.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/

####################################################

directive @isAuthenticated on FIELD_DEFINITION

# RFC3339 e.g. 2019-11-19T18:00:00+09:00
scalar DateTime

scalar Long

scalar Upload

####################################################

type Player {
  id: ID!
  name: String!
  authorityCodes: [String!]!
}

####################################################

type ChinchiroRoom {
  id: ID!
  name: String!
  status: ChinchiroRoomStatus!
  roomMasters: [ChinchiroRoomMaster!]!
  participants: [ChinchiroRoomParticipant!]!
  games: [ChinchiroGame!]!
  settings: ChinchiroRoomSettings!
}

type SimpleChinchiroRoom {
  id: ID!
  name: String!
  status: ChinchiroRoomStatus!
  participantCounts: Int!
  settings: ChinchiroRoomSettings!
}

enum ChinchiroRoomStatus {
  Opened
  Finished
}

type ChinchiroRoomMaster {
  id: ID!
  player: Player!
}

type ChinchiroRoomParticipant {
  id: ID!
  name: String!
  player: Player!
  isGone: Boolean!
}

type ChinchiroRoomSettings {
  dummy: String!
}

type ChinchiroGame {
  id: ID!
  status: ChinchiroGameStatus!
  participants: [ChinchiroGameParticipant!]!
  turns: [ChinchiroGameTurn!]!
}

enum ChinchiroGameStatus {
  Progress
  Finished
}

type ChinchiroGameParticipant {
  id: ID!
  roomParticipant: ChinchiroRoomParticipant!
  balance: Int!
  turnOrder: Int!
}

type ChinchiroGameTurn {
  id: ID!
  dealer: ChinchiroGameParticipant!
  nextRoller: ChinchiroGameParticipant
  status: ChinchiroGameTurnStatus!
  turnNumber: Int!
  rolls: [ChinchiroGameTurnParticipantRoll!]!
  results: [ChinchiroGameTurnParticipantResult!]!
}

enum ChinchiroGameTurnStatus {
  Betting
  Rolling
  Finished
}

type ChinchiroGameTurnParticipantRoll {
  id: ID!
  turn: ChinchiroGameTurn!
  participant: ChinchiroGameParticipant!
  rollNumber: Int!
  dice1: Int!
  dice2: Int!
  dice3: Int!
}

type ChinchiroGameTurnParticipantResult {
  id: ID!
  turn: ChinchiroGameTurn!
  participant: ChinchiroGameParticipant!
  dice1: Int!
  dice2: Int!
  dice3: Int!
  combination: ChinchiroCombination!
  winnings: Int!
}

enum ChinchiroCombination {
  Hifumi
  Menashi
  Ichinome
  Ninome
  Sannome
  Yonnome
  Gonome
  Rokunome
  Pinzoro
  Nizoro
  Sanzoro
  Yonzoro
  Gozoro
  Rokuzoro
  Shigoro
}

####################################################

interface Pageable {
  allPageCount: Int!
  hasPrePage: Boolean!
  hasNextPage: Boolean!
  currentPageNumber: Int
  isDesc: Boolean!
}

####################################################

type Query {
  players(query: PlayersQuery!): [Player!]!
  player(id: ID!): Player
  myPlayer: Player

  chinchiroRooms(query: ChinchiroRoomsQuery!): [SimpleChinchiroRoom!]!
  chinchiroRoom(roomId: ID!): ChinchiroRoom
  myChinchiroRoomParticipant(roomId: ID!): ChinchiroRoomParticipant
  chinchiroGames(query: ChinchiroGamesQuery!): [ChinchiroGame!]!
  chinchiroGame(gameId: ID!): ChinchiroGame
  myChinchiroGameParticipant(gameId: ID!): ChinchiroGameParticipant
  chinchiroGameTurns(query: ChinchiroGameTurnsQuery!): [ChinchiroGameTurn!]!
  chinchiroGameTurn(turnId: ID!): ChinchiroGameTurn
  chinchiroGameTurnRolls(
    query: ChinchiroGameTurnRollsQuery
  ): [ChinchiroGameTurnParticipantRoll!]!
  chinchiroGameTurnParticipantResults(
    query: ChinchiroGameTurnParticipantResultsQuery!
  ): [ChinchiroGameTurnParticipantResult!]!
}

input PageableQuery {
  pageSize: Int!
  pageNumber: Int!
  isDesc: Boolean!
  isLatest: Boolean!
}

input PlayersQuery {
  ids: [ID!]
  name: String
  paging: PageableQuery
}

input ChinchiroRoomsQuery {
  ids: [ID!]
  name: String
  statuses: [ChinchiroRoomStatus!]
  paging: PageableQuery
}

input ChinchiroGamesQuery {
  ids: [ID!]
  roomId: ID
  name: String
  statuses: [ChinchiroGameStatus!]
  paging: PageableQuery
}

input ChinchiroGameTurnsQuery {
  ids: [ID!]
  gameId: ID
  statuses: [ChinchiroGameTurnStatus!]
  paging: PageableQuery
}

input ChinchiroGameTurnRollsQuery {
  ids: [ID!]
  turnId: ID
  paging: PageableQuery
}

input ChinchiroGameTurnParticipantResultsQuery {
  ids: [ID!]
  turnId: ID
  paging: PageableQuery
}

####################################################

type Mutation {
  ## chinchiro
  # room
  registerChinchiroRoom(
    input: NewChinchiroRoom!
  ): RegisterChinchiroRoomPayload! @isAuthenticated
  registerChinchiroRoomMaster(
    input: NewChinchiroRoomMaster!
  ): RegisterChinchiroRoomMasterPayload! @isAuthenticated
  deleteChinchiroRoomMaster(
    input: DeleteChinchiroRoomMaster!
  ): DeleteChinchiroRoomMasterPayload! @isAuthenticated
  updateChinchiroRoomStatus(
    input: UpdateChinchiroRoomStatus!
  ): UpdateChinchiroRoomStatusPayload! @isAuthenticated
  updateChinchiroRoomSettings(
    input: UpdateChinchiroRoomSettings!
  ): UpdateChinchiroRoomSettingsPayload! @isAuthenticated

  # room participant
  registerChinchiroRoomParticipant(
    input: NewChinchiroRoomParticipant!
  ): RegisterChinchiroRoomParticipantPayload! @isAuthenticated
  updateChinchiroRoomParticipant(
    input: UpdateChinchiroRoomParticipant!
  ): UpdateChinchiroRoomParticipantPayload! @isAuthenticated
  leaveChinchiroRoom(input: LeaveChinchiroRoom!): LeaveChinchiroRoomPayload!
    @isAuthenticated
  deleteChinchiroRoomParticipant(
    input: DeleteChinchiroRoomParticipant!
  ): DeleteChinchiroRoomParticipantPayload! @isAuthenticated

  # game
  registerChinchiroGame(
    input: NewChinchiroGame!
  ): RegisterChinchiroGamePayload! @isAuthenticated

  # game turn
  updateChinchiroGameTurnStatus(
    input: UpdateChinchiroGameTurnStatus!
  ): UpdateChinchiroGameTurnStatusPayload! @isAuthenticated

  # game turn participant
  betChinchiroGameTurnParticipant(
    input: BetChinchiroGameTurnParticipant!
  ): BetChinchiroGameTurnParticipantPayload! @isAuthenticated
  rollChinchiroGameTurnParticipant(
    input: RollChinchiroGameTurnParticipant!
  ): RollChinchiroGameTurnParticipantPayload! @isAuthenticated
}

## chinchiro

# room

input NewChinchiroRoom {
  name: String!
}

type RegisterChinchiroRoomPayload {
  chinchiroRoom: ChinchiroRoom!
}

input NewChinchiroRoomMaster {
  roomId: ID!
  playerId: ID!
}

type RegisterChinchiroRoomMasterPayload {
  chinchiroRoomMaster: ChinchiroRoomMaster!
}

input DeleteChinchiroRoomMaster {
  roomID: ID!
  masterId: ID!
}

type DeleteChinchiroRoomMasterPayload {
  ok: Boolean!
}

input UpdateChinchiroRoomStatus {
  roomId: ID!
  status: ChinchiroRoomStatus!
}

type UpdateChinchiroRoomStatusPayload {
  ok: Boolean!
}

input UpdateChinchiroRoomSettings {
  roomId: ID!
  dummy: String!
}

type UpdateChinchiroRoomSettingsPayload {
  ok: Boolean!
}

# room participant

input NewChinchiroRoomParticipant {
  roomId: ID!
  name: String!
  password: String
}

type RegisterChinchiroRoomParticipantPayload {
  chinchiroRoomParticipant: ChinchiroRoomParticipant!
}

input UpdateChinchiroRoomParticipant {
  roomId: ID!
  participantId: ID!
  name: String!
}

type UpdateChinchiroRoomParticipantPayload {
  ok: Boolean!
}

input LeaveChinchiroRoom {
  roomId: ID!
}

type LeaveChinchiroRoomPayload {
  ok: Boolean!
}

input DeleteChinchiroRoomParticipant {
  roomId: ID!
  participantId: ID!
}

type DeleteChinchiroRoomParticipantPayload {
  ok: Boolean!
}

# game

input NewChinchiroGame {
  roomId: ID!
}

type RegisterChinchiroGamePayload {
  chinchiroGame: ChinchiroGame!
}

# game turn

input UpdateChinchiroGameTurnStatus {
  turnId: ID!
  status: ChinchiroGameTurnStatus!
}

type UpdateChinchiroGameTurnStatusPayload {
  ok: Boolean!
}

# game turn participant

input BetChinchiroGameTurnParticipant {
  turnId: ID!
  betAmount: Int!
}

type BetChinchiroGameTurnParticipantPayload {
  ok: Boolean!
}

input RollChinchiroGameTurnParticipant {
  turnId: ID!
}

type RollChinchiroGameTurnParticipantPayload {
  ok: Boolean!
}

####################################################
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_betChinchiroGameTurnParticipant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.BetChinchiroGameTurnParticipant
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBetChinchiroGameTurnParticipant2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐBetChinchiroGameTurnParticipant(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteChinchiroRoomMaster_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.DeleteChinchiroRoomMaster
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteChinchiroRoomMaster2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteChinchiroRoomMaster(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteChinchiroRoomParticipant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.DeleteChinchiroRoomParticipant
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteChinchiroRoomParticipant2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteChinchiroRoomParticipant(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_leaveChinchiroRoom_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.LeaveChinchiroRoom
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLeaveChinchiroRoom2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐLeaveChinchiroRoom(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerChinchiroGame_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewChinchiroGame
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewChinchiroGame2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐNewChinchiroGame(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerChinchiroRoomMaster_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewChinchiroRoomMaster
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewChinchiroRoomMaster2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐNewChinchiroRoomMaster(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerChinchiroRoomParticipant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewChinchiroRoomParticipant
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewChinchiroRoomParticipant2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐNewChinchiroRoomParticipant(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerChinchiroRoom_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewChinchiroRoom
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewChinchiroRoom2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐNewChinchiroRoom(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rollChinchiroGameTurnParticipant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.RollChinchiroGameTurnParticipant
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRollChinchiroGameTurnParticipant2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRollChinchiroGameTurnParticipant(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChinchiroGameTurnStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UpdateChinchiroGameTurnStatus
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateChinchiroGameTurnStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroGameTurnStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChinchiroRoomParticipant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UpdateChinchiroRoomParticipant
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateChinchiroRoomParticipant2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroRoomParticipant(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChinchiroRoomSettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UpdateChinchiroRoomSettings
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateChinchiroRoomSettings2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroRoomSettings(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChinchiroRoomStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UpdateChinchiroRoomStatus
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateChinchiroRoomStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroRoomStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_chinchiroGameTurnParticipantResults_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.ChinchiroGameTurnParticipantResultsQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNChinchiroGameTurnParticipantResultsQuery2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnParticipantResultsQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_chinchiroGameTurnRolls_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodel.ChinchiroGameTurnRollsQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOChinchiroGameTurnRollsQuery2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnRollsQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_chinchiroGameTurn_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["turnId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("turnId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["turnId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_chinchiroGameTurns_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.ChinchiroGameTurnsQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNChinchiroGameTurnsQuery2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnsQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_chinchiroGame_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gameId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gameId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_chinchiroGames_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.ChinchiroGamesQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNChinchiroGamesQuery2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGamesQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_chinchiroRoom_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["roomId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roomId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roomId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_chinchiroRooms_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.ChinchiroRoomsQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNChinchiroRoomsQuery2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomsQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_myChinchiroGameParticipant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gameId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gameId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_myChinchiroRoomParticipant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["roomId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roomId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roomId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_player_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_players_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.PlayersQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNPlayersQuery2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayersQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _BetChinchiroGameTurnParticipantPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.BetChinchiroGameTurnParticipantPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BetChinchiroGameTurnParticipantPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BetChinchiroGameTurnParticipantPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BetChinchiroGameTurnParticipantPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGame_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGame_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGame_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGame_status(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGame_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.ChinchiroGameStatus)
	fc.Result = res
	return ec.marshalNChinchiroGameStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGame_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ChinchiroGameStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGame_participants(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGame_participants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroGame().Participants(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.ChinchiroGameParticipant)
	fc.Result = res
	return ec.marshalNChinchiroGameParticipant2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameParticipantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGame_participants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGame",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGameParticipant_id(ctx, field)
			case "roomParticipant":
				return ec.fieldContext_ChinchiroGameParticipant_roomParticipant(ctx, field)
			case "balance":
				return ec.fieldContext_ChinchiroGameParticipant_balance(ctx, field)
			case "turnOrder":
				return ec.fieldContext_ChinchiroGameParticipant_turnOrder(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGameParticipant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGame_turns(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGame_turns(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroGame().Turns(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.ChinchiroGameTurn)
	fc.Result = res
	return ec.marshalNChinchiroGameTurn2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGame_turns(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGame",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGameTurn_id(ctx, field)
			case "dealer":
				return ec.fieldContext_ChinchiroGameTurn_dealer(ctx, field)
			case "nextRoller":
				return ec.fieldContext_ChinchiroGameTurn_nextRoller(ctx, field)
			case "status":
				return ec.fieldContext_ChinchiroGameTurn_status(ctx, field)
			case "turnNumber":
				return ec.fieldContext_ChinchiroGameTurn_turnNumber(ctx, field)
			case "rolls":
				return ec.fieldContext_ChinchiroGameTurn_rolls(ctx, field)
			case "results":
				return ec.fieldContext_ChinchiroGameTurn_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGameTurn", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameParticipant_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameParticipant_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameParticipant_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameParticipant_roomParticipant(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameParticipant_roomParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroGameParticipant().RoomParticipant(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroRoomParticipant)
	fc.Result = res
	return ec.marshalNChinchiroRoomParticipant2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameParticipant_roomParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameParticipant",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroRoomParticipant_id(ctx, field)
			case "name":
				return ec.fieldContext_ChinchiroRoomParticipant_name(ctx, field)
			case "player":
				return ec.fieldContext_ChinchiroRoomParticipant_player(ctx, field)
			case "isGone":
				return ec.fieldContext_ChinchiroRoomParticipant_isGone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroRoomParticipant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameParticipant_balance(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameParticipant_balance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Balance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameParticipant_balance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameParticipant_turnOrder(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameParticipant_turnOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TurnOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameParticipant_turnOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurn_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurn_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurn_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurn_dealer(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurn_dealer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroGameTurn().Dealer(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroGameParticipant)
	fc.Result = res
	return ec.marshalNChinchiroGameParticipant2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurn_dealer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurn",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGameParticipant_id(ctx, field)
			case "roomParticipant":
				return ec.fieldContext_ChinchiroGameParticipant_roomParticipant(ctx, field)
			case "balance":
				return ec.fieldContext_ChinchiroGameParticipant_balance(ctx, field)
			case "turnOrder":
				return ec.fieldContext_ChinchiroGameParticipant_turnOrder(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGameParticipant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurn_nextRoller(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurn_nextRoller(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroGameTurn().NextRoller(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroGameParticipant)
	fc.Result = res
	return ec.marshalOChinchiroGameParticipant2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurn_nextRoller(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurn",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGameParticipant_id(ctx, field)
			case "roomParticipant":
				return ec.fieldContext_ChinchiroGameParticipant_roomParticipant(ctx, field)
			case "balance":
				return ec.fieldContext_ChinchiroGameParticipant_balance(ctx, field)
			case "turnOrder":
				return ec.fieldContext_ChinchiroGameParticipant_turnOrder(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGameParticipant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurn_status(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurn_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.ChinchiroGameTurnStatus)
	fc.Result = res
	return ec.marshalNChinchiroGameTurnStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurn_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ChinchiroGameTurnStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurn_turnNumber(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurn_turnNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TurnNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurn_turnNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurn_rolls(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurn_rolls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroGameTurn().Rolls(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.ChinchiroGameTurnParticipantRoll)
	fc.Result = res
	return ec.marshalNChinchiroGameTurnParticipantRoll2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnParticipantRollᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurn_rolls(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurn",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGameTurnParticipantRoll_id(ctx, field)
			case "turn":
				return ec.fieldContext_ChinchiroGameTurnParticipantRoll_turn(ctx, field)
			case "participant":
				return ec.fieldContext_ChinchiroGameTurnParticipantRoll_participant(ctx, field)
			case "rollNumber":
				return ec.fieldContext_ChinchiroGameTurnParticipantRoll_rollNumber(ctx, field)
			case "dice1":
				return ec.fieldContext_ChinchiroGameTurnParticipantRoll_dice1(ctx, field)
			case "dice2":
				return ec.fieldContext_ChinchiroGameTurnParticipantRoll_dice2(ctx, field)
			case "dice3":
				return ec.fieldContext_ChinchiroGameTurnParticipantRoll_dice3(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGameTurnParticipantRoll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurn_results(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurn_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroGameTurn().Results(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.ChinchiroGameTurnParticipantResult)
	fc.Result = res
	return ec.marshalNChinchiroGameTurnParticipantResult2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnParticipantResultᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurn_results(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurn",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_id(ctx, field)
			case "turn":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_turn(ctx, field)
			case "participant":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_participant(ctx, field)
			case "dice1":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_dice1(ctx, field)
			case "dice2":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_dice2(ctx, field)
			case "dice3":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_dice3(ctx, field)
			case "combination":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_combination(ctx, field)
			case "winnings":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_winnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGameTurnParticipantResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurnParticipantResult_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurnParticipantResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurnParticipantResult_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurnParticipantResult_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurnParticipantResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurnParticipantResult_turn(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurnParticipantResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurnParticipantResult_turn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroGameTurnParticipantResult().Turn(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroGameTurn)
	fc.Result = res
	return ec.marshalNChinchiroGameTurn2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurn(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurnParticipantResult_turn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurnParticipantResult",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGameTurn_id(ctx, field)
			case "dealer":
				return ec.fieldContext_ChinchiroGameTurn_dealer(ctx, field)
			case "nextRoller":
				return ec.fieldContext_ChinchiroGameTurn_nextRoller(ctx, field)
			case "status":
				return ec.fieldContext_ChinchiroGameTurn_status(ctx, field)
			case "turnNumber":
				return ec.fieldContext_ChinchiroGameTurn_turnNumber(ctx, field)
			case "rolls":
				return ec.fieldContext_ChinchiroGameTurn_rolls(ctx, field)
			case "results":
				return ec.fieldContext_ChinchiroGameTurn_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGameTurn", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurnParticipantResult_participant(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurnParticipantResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurnParticipantResult_participant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroGameTurnParticipantResult().Participant(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroGameParticipant)
	fc.Result = res
	return ec.marshalNChinchiroGameParticipant2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurnParticipantResult_participant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurnParticipantResult",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGameParticipant_id(ctx, field)
			case "roomParticipant":
				return ec.fieldContext_ChinchiroGameParticipant_roomParticipant(ctx, field)
			case "balance":
				return ec.fieldContext_ChinchiroGameParticipant_balance(ctx, field)
			case "turnOrder":
				return ec.fieldContext_ChinchiroGameParticipant_turnOrder(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGameParticipant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurnParticipantResult_dice1(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurnParticipantResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurnParticipantResult_dice1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dice1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurnParticipantResult_dice1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurnParticipantResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurnParticipantResult_dice2(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurnParticipantResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurnParticipantResult_dice2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dice2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurnParticipantResult_dice2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurnParticipantResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurnParticipantResult_dice3(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurnParticipantResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurnParticipantResult_dice3(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dice3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurnParticipantResult_dice3(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurnParticipantResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurnParticipantResult_combination(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurnParticipantResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurnParticipantResult_combination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Combination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.ChinchiroCombination)
	fc.Result = res
	return ec.marshalNChinchiroCombination2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroCombination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurnParticipantResult_combination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurnParticipantResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ChinchiroCombination does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurnParticipantResult_winnings(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurnParticipantResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurnParticipantResult_winnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Winnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurnParticipantResult_winnings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurnParticipantResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurnParticipantRoll_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurnParticipantRoll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurnParticipantRoll_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurnParticipantRoll_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurnParticipantRoll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurnParticipantRoll_turn(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurnParticipantRoll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurnParticipantRoll_turn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroGameTurnParticipantRoll().Turn(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroGameTurn)
	fc.Result = res
	return ec.marshalNChinchiroGameTurn2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurn(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurnParticipantRoll_turn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurnParticipantRoll",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGameTurn_id(ctx, field)
			case "dealer":
				return ec.fieldContext_ChinchiroGameTurn_dealer(ctx, field)
			case "nextRoller":
				return ec.fieldContext_ChinchiroGameTurn_nextRoller(ctx, field)
			case "status":
				return ec.fieldContext_ChinchiroGameTurn_status(ctx, field)
			case "turnNumber":
				return ec.fieldContext_ChinchiroGameTurn_turnNumber(ctx, field)
			case "rolls":
				return ec.fieldContext_ChinchiroGameTurn_rolls(ctx, field)
			case "results":
				return ec.fieldContext_ChinchiroGameTurn_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGameTurn", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurnParticipantRoll_participant(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurnParticipantRoll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurnParticipantRoll_participant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroGameTurnParticipantRoll().Participant(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroGameParticipant)
	fc.Result = res
	return ec.marshalNChinchiroGameParticipant2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurnParticipantRoll_participant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurnParticipantRoll",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGameParticipant_id(ctx, field)
			case "roomParticipant":
				return ec.fieldContext_ChinchiroGameParticipant_roomParticipant(ctx, field)
			case "balance":
				return ec.fieldContext_ChinchiroGameParticipant_balance(ctx, field)
			case "turnOrder":
				return ec.fieldContext_ChinchiroGameParticipant_turnOrder(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGameParticipant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurnParticipantRoll_rollNumber(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurnParticipantRoll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurnParticipantRoll_rollNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RollNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurnParticipantRoll_rollNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurnParticipantRoll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurnParticipantRoll_dice1(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurnParticipantRoll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurnParticipantRoll_dice1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dice1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurnParticipantRoll_dice1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurnParticipantRoll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurnParticipantRoll_dice2(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurnParticipantRoll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurnParticipantRoll_dice2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dice2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurnParticipantRoll_dice2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurnParticipantRoll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroGameTurnParticipantRoll_dice3(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroGameTurnParticipantRoll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroGameTurnParticipantRoll_dice3(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dice3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroGameTurnParticipantRoll_dice3(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroGameTurnParticipantRoll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroRoom_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroRoom) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroRoom_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroRoom_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroRoom",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroRoom_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroRoom) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroRoom_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroRoom_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroRoom",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroRoom_status(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroRoom) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroRoom_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.ChinchiroRoomStatus)
	fc.Result = res
	return ec.marshalNChinchiroRoomStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroRoom_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroRoom",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ChinchiroRoomStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroRoom_roomMasters(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroRoom) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroRoom_roomMasters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroRoom().RoomMasters(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.ChinchiroRoomMaster)
	fc.Result = res
	return ec.marshalNChinchiroRoomMaster2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomMasterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroRoom_roomMasters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroRoom",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroRoomMaster_id(ctx, field)
			case "player":
				return ec.fieldContext_ChinchiroRoomMaster_player(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroRoomMaster", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroRoom_participants(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroRoom) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroRoom_participants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroRoom().Participants(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.ChinchiroRoomParticipant)
	fc.Result = res
	return ec.marshalNChinchiroRoomParticipant2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomParticipantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroRoom_participants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroRoom",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroRoomParticipant_id(ctx, field)
			case "name":
				return ec.fieldContext_ChinchiroRoomParticipant_name(ctx, field)
			case "player":
				return ec.fieldContext_ChinchiroRoomParticipant_player(ctx, field)
			case "isGone":
				return ec.fieldContext_ChinchiroRoomParticipant_isGone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroRoomParticipant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroRoom_games(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroRoom) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroRoom_games(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroRoom().Games(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.ChinchiroGame)
	fc.Result = res
	return ec.marshalNChinchiroGame2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroRoom_games(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroRoom",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGame_id(ctx, field)
			case "status":
				return ec.fieldContext_ChinchiroGame_status(ctx, field)
			case "participants":
				return ec.fieldContext_ChinchiroGame_participants(ctx, field)
			case "turns":
				return ec.fieldContext_ChinchiroGame_turns(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGame", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroRoom_settings(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroRoom) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroRoom_settings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroRoomSettings)
	fc.Result = res
	return ec.marshalNChinchiroRoomSettings2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroRoom_settings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroRoom",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dummy":
				return ec.fieldContext_ChinchiroRoomSettings_dummy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroRoomSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroRoomMaster_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroRoomMaster) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroRoomMaster_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroRoomMaster_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroRoomMaster",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroRoomMaster_player(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroRoomMaster) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroRoomMaster_player(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroRoomMaster().Player(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Player)
	fc.Result = res
	return ec.marshalNPlayer2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroRoomMaster_player(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroRoomMaster",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "authorityCodes":
				return ec.fieldContext_Player_authorityCodes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroRoomParticipant_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroRoomParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroRoomParticipant_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroRoomParticipant_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroRoomParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroRoomParticipant_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroRoomParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroRoomParticipant_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroRoomParticipant_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroRoomParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroRoomParticipant_player(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroRoomParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroRoomParticipant_player(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChinchiroRoomParticipant().Player(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Player)
	fc.Result = res
	return ec.marshalNPlayer2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroRoomParticipant_player(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroRoomParticipant",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "authorityCodes":
				return ec.fieldContext_Player_authorityCodes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroRoomParticipant_isGone(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroRoomParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroRoomParticipant_isGone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsGone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroRoomParticipant_isGone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroRoomParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChinchiroRoomSettings_dummy(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChinchiroRoomSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChinchiroRoomSettings_dummy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dummy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChinchiroRoomSettings_dummy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChinchiroRoomSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteChinchiroRoomMasterPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DeleteChinchiroRoomMasterPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteChinchiroRoomMasterPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteChinchiroRoomMasterPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteChinchiroRoomMasterPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteChinchiroRoomParticipantPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DeleteChinchiroRoomParticipantPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteChinchiroRoomParticipantPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteChinchiroRoomParticipantPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteChinchiroRoomParticipantPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeaveChinchiroRoomPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.LeaveChinchiroRoomPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeaveChinchiroRoomPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeaveChinchiroRoomPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeaveChinchiroRoomPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerChinchiroRoom(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerChinchiroRoom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterChinchiroRoom(rctx, fc.Args["input"].(gqlmodel.NewChinchiroRoom))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterChinchiroRoomPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *wolfort-games/middleware/graph/gqlmodel.RegisterChinchiroRoomPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterChinchiroRoomPayload)
	fc.Result = res
	return ec.marshalNRegisterChinchiroRoomPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterChinchiroRoomPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerChinchiroRoom(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "chinchiroRoom":
				return ec.fieldContext_RegisterChinchiroRoomPayload_chinchiroRoom(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterChinchiroRoomPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerChinchiroRoom_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerChinchiroRoomMaster(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerChinchiroRoomMaster(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterChinchiroRoomMaster(rctx, fc.Args["input"].(gqlmodel.NewChinchiroRoomMaster))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterChinchiroRoomMasterPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *wolfort-games/middleware/graph/gqlmodel.RegisterChinchiroRoomMasterPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterChinchiroRoomMasterPayload)
	fc.Result = res
	return ec.marshalNRegisterChinchiroRoomMasterPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterChinchiroRoomMasterPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerChinchiroRoomMaster(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "chinchiroRoomMaster":
				return ec.fieldContext_RegisterChinchiroRoomMasterPayload_chinchiroRoomMaster(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterChinchiroRoomMasterPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerChinchiroRoomMaster_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteChinchiroRoomMaster(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteChinchiroRoomMaster(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteChinchiroRoomMaster(rctx, fc.Args["input"].(gqlmodel.DeleteChinchiroRoomMaster))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.DeleteChinchiroRoomMasterPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *wolfort-games/middleware/graph/gqlmodel.DeleteChinchiroRoomMasterPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DeleteChinchiroRoomMasterPayload)
	fc.Result = res
	return ec.marshalNDeleteChinchiroRoomMasterPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteChinchiroRoomMasterPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteChinchiroRoomMaster(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_DeleteChinchiroRoomMasterPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteChinchiroRoomMasterPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteChinchiroRoomMaster_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateChinchiroRoomStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateChinchiroRoomStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateChinchiroRoomStatus(rctx, fc.Args["input"].(gqlmodel.UpdateChinchiroRoomStatus))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.UpdateChinchiroRoomStatusPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *wolfort-games/middleware/graph/gqlmodel.UpdateChinchiroRoomStatusPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.UpdateChinchiroRoomStatusPayload)
	fc.Result = res
	return ec.marshalNUpdateChinchiroRoomStatusPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroRoomStatusPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateChinchiroRoomStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_UpdateChinchiroRoomStatusPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateChinchiroRoomStatusPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateChinchiroRoomStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateChinchiroRoomSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateChinchiroRoomSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateChinchiroRoomSettings(rctx, fc.Args["input"].(gqlmodel.UpdateChinchiroRoomSettings))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.UpdateChinchiroRoomSettingsPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *wolfort-games/middleware/graph/gqlmodel.UpdateChinchiroRoomSettingsPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.UpdateChinchiroRoomSettingsPayload)
	fc.Result = res
	return ec.marshalNUpdateChinchiroRoomSettingsPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroRoomSettingsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateChinchiroRoomSettings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_UpdateChinchiroRoomSettingsPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateChinchiroRoomSettingsPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateChinchiroRoomSettings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerChinchiroRoomParticipant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerChinchiroRoomParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterChinchiroRoomParticipant(rctx, fc.Args["input"].(gqlmodel.NewChinchiroRoomParticipant))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterChinchiroRoomParticipantPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *wolfort-games/middleware/graph/gqlmodel.RegisterChinchiroRoomParticipantPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterChinchiroRoomParticipantPayload)
	fc.Result = res
	return ec.marshalNRegisterChinchiroRoomParticipantPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterChinchiroRoomParticipantPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerChinchiroRoomParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "chinchiroRoomParticipant":
				return ec.fieldContext_RegisterChinchiroRoomParticipantPayload_chinchiroRoomParticipant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterChinchiroRoomParticipantPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerChinchiroRoomParticipant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateChinchiroRoomParticipant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateChinchiroRoomParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateChinchiroRoomParticipant(rctx, fc.Args["input"].(gqlmodel.UpdateChinchiroRoomParticipant))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.UpdateChinchiroRoomParticipantPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *wolfort-games/middleware/graph/gqlmodel.UpdateChinchiroRoomParticipantPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.UpdateChinchiroRoomParticipantPayload)
	fc.Result = res
	return ec.marshalNUpdateChinchiroRoomParticipantPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroRoomParticipantPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateChinchiroRoomParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_UpdateChinchiroRoomParticipantPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateChinchiroRoomParticipantPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateChinchiroRoomParticipant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_leaveChinchiroRoom(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_leaveChinchiroRoom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().LeaveChinchiroRoom(rctx, fc.Args["input"].(gqlmodel.LeaveChinchiroRoom))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.LeaveChinchiroRoomPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *wolfort-games/middleware/graph/gqlmodel.LeaveChinchiroRoomPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.LeaveChinchiroRoomPayload)
	fc.Result = res
	return ec.marshalNLeaveChinchiroRoomPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐLeaveChinchiroRoomPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_leaveChinchiroRoom(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_LeaveChinchiroRoomPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LeaveChinchiroRoomPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_leaveChinchiroRoom_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteChinchiroRoomParticipant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteChinchiroRoomParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteChinchiroRoomParticipant(rctx, fc.Args["input"].(gqlmodel.DeleteChinchiroRoomParticipant))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.DeleteChinchiroRoomParticipantPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *wolfort-games/middleware/graph/gqlmodel.DeleteChinchiroRoomParticipantPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DeleteChinchiroRoomParticipantPayload)
	fc.Result = res
	return ec.marshalNDeleteChinchiroRoomParticipantPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteChinchiroRoomParticipantPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteChinchiroRoomParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_DeleteChinchiroRoomParticipantPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteChinchiroRoomParticipantPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteChinchiroRoomParticipant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerChinchiroGame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerChinchiroGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterChinchiroGame(rctx, fc.Args["input"].(gqlmodel.NewChinchiroGame))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterChinchiroGamePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *wolfort-games/middleware/graph/gqlmodel.RegisterChinchiroGamePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterChinchiroGamePayload)
	fc.Result = res
	return ec.marshalNRegisterChinchiroGamePayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterChinchiroGamePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerChinchiroGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "chinchiroGame":
				return ec.fieldContext_RegisterChinchiroGamePayload_chinchiroGame(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterChinchiroGamePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerChinchiroGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateChinchiroGameTurnStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateChinchiroGameTurnStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateChinchiroGameTurnStatus(rctx, fc.Args["input"].(gqlmodel.UpdateChinchiroGameTurnStatus))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.UpdateChinchiroGameTurnStatusPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *wolfort-games/middleware/graph/gqlmodel.UpdateChinchiroGameTurnStatusPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.UpdateChinchiroGameTurnStatusPayload)
	fc.Result = res
	return ec.marshalNUpdateChinchiroGameTurnStatusPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroGameTurnStatusPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateChinchiroGameTurnStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_UpdateChinchiroGameTurnStatusPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateChinchiroGameTurnStatusPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateChinchiroGameTurnStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_betChinchiroGameTurnParticipant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_betChinchiroGameTurnParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BetChinchiroGameTurnParticipant(rctx, fc.Args["input"].(gqlmodel.BetChinchiroGameTurnParticipant))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.BetChinchiroGameTurnParticipantPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *wolfort-games/middleware/graph/gqlmodel.BetChinchiroGameTurnParticipantPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.BetChinchiroGameTurnParticipantPayload)
	fc.Result = res
	return ec.marshalNBetChinchiroGameTurnParticipantPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐBetChinchiroGameTurnParticipantPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_betChinchiroGameTurnParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_BetChinchiroGameTurnParticipantPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BetChinchiroGameTurnParticipantPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_betChinchiroGameTurnParticipant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rollChinchiroGameTurnParticipant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rollChinchiroGameTurnParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RollChinchiroGameTurnParticipant(rctx, fc.Args["input"].(gqlmodel.RollChinchiroGameTurnParticipant))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RollChinchiroGameTurnParticipantPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *wolfort-games/middleware/graph/gqlmodel.RollChinchiroGameTurnParticipantPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RollChinchiroGameTurnParticipantPayload)
	fc.Result = res
	return ec.marshalNRollChinchiroGameTurnParticipantPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRollChinchiroGameTurnParticipantPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rollChinchiroGameTurnParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_RollChinchiroGameTurnParticipantPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RollChinchiroGameTurnParticipantPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rollChinchiroGameTurnParticipant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Player_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_authorityCodes(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_authorityCodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorityCodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_authorityCodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_players(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_players(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Players(rctx, fc.Args["query"].(gqlmodel.PlayersQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.Player)
	fc.Result = res
	return ec.marshalNPlayer2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_players(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "authorityCodes":
				return ec.fieldContext_Player_authorityCodes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_players_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_player(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_player(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Player(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Player)
	fc.Result = res
	return ec.marshalOPlayer2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_player(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "authorityCodes":
				return ec.fieldContext_Player_authorityCodes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_player_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_myPlayer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_myPlayer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MyPlayer(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Player)
	fc.Result = res
	return ec.marshalOPlayer2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_myPlayer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "authorityCodes":
				return ec.fieldContext_Player_authorityCodes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_chinchiroRooms(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_chinchiroRooms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChinchiroRooms(rctx, fc.Args["query"].(gqlmodel.ChinchiroRoomsQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.SimpleChinchiroRoom)
	fc.Result = res
	return ec.marshalNSimpleChinchiroRoom2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐSimpleChinchiroRoomᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_chinchiroRooms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SimpleChinchiroRoom_id(ctx, field)
			case "name":
				return ec.fieldContext_SimpleChinchiroRoom_name(ctx, field)
			case "status":
				return ec.fieldContext_SimpleChinchiroRoom_status(ctx, field)
			case "participantCounts":
				return ec.fieldContext_SimpleChinchiroRoom_participantCounts(ctx, field)
			case "settings":
				return ec.fieldContext_SimpleChinchiroRoom_settings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SimpleChinchiroRoom", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_chinchiroRooms_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_chinchiroRoom(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_chinchiroRoom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChinchiroRoom(rctx, fc.Args["roomId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroRoom)
	fc.Result = res
	return ec.marshalOChinchiroRoom2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoom(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_chinchiroRoom(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroRoom_id(ctx, field)
			case "name":
				return ec.fieldContext_ChinchiroRoom_name(ctx, field)
			case "status":
				return ec.fieldContext_ChinchiroRoom_status(ctx, field)
			case "roomMasters":
				return ec.fieldContext_ChinchiroRoom_roomMasters(ctx, field)
			case "participants":
				return ec.fieldContext_ChinchiroRoom_participants(ctx, field)
			case "games":
				return ec.fieldContext_ChinchiroRoom_games(ctx, field)
			case "settings":
				return ec.fieldContext_ChinchiroRoom_settings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroRoom", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_chinchiroRoom_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_myChinchiroRoomParticipant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_myChinchiroRoomParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MyChinchiroRoomParticipant(rctx, fc.Args["roomId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroRoomParticipant)
	fc.Result = res
	return ec.marshalOChinchiroRoomParticipant2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_myChinchiroRoomParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroRoomParticipant_id(ctx, field)
			case "name":
				return ec.fieldContext_ChinchiroRoomParticipant_name(ctx, field)
			case "player":
				return ec.fieldContext_ChinchiroRoomParticipant_player(ctx, field)
			case "isGone":
				return ec.fieldContext_ChinchiroRoomParticipant_isGone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroRoomParticipant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_myChinchiroRoomParticipant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_chinchiroGames(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_chinchiroGames(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChinchiroGames(rctx, fc.Args["query"].(gqlmodel.ChinchiroGamesQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.ChinchiroGame)
	fc.Result = res
	return ec.marshalNChinchiroGame2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_chinchiroGames(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGame_id(ctx, field)
			case "status":
				return ec.fieldContext_ChinchiroGame_status(ctx, field)
			case "participants":
				return ec.fieldContext_ChinchiroGame_participants(ctx, field)
			case "turns":
				return ec.fieldContext_ChinchiroGame_turns(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGame", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_chinchiroGames_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_chinchiroGame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_chinchiroGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChinchiroGame(rctx, fc.Args["gameId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroGame)
	fc.Result = res
	return ec.marshalOChinchiroGame2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_chinchiroGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGame_id(ctx, field)
			case "status":
				return ec.fieldContext_ChinchiroGame_status(ctx, field)
			case "participants":
				return ec.fieldContext_ChinchiroGame_participants(ctx, field)
			case "turns":
				return ec.fieldContext_ChinchiroGame_turns(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGame", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_chinchiroGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_myChinchiroGameParticipant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_myChinchiroGameParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MyChinchiroGameParticipant(rctx, fc.Args["gameId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroGameParticipant)
	fc.Result = res
	return ec.marshalOChinchiroGameParticipant2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_myChinchiroGameParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGameParticipant_id(ctx, field)
			case "roomParticipant":
				return ec.fieldContext_ChinchiroGameParticipant_roomParticipant(ctx, field)
			case "balance":
				return ec.fieldContext_ChinchiroGameParticipant_balance(ctx, field)
			case "turnOrder":
				return ec.fieldContext_ChinchiroGameParticipant_turnOrder(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGameParticipant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_myChinchiroGameParticipant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_chinchiroGameTurns(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_chinchiroGameTurns(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChinchiroGameTurns(rctx, fc.Args["query"].(gqlmodel.ChinchiroGameTurnsQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.ChinchiroGameTurn)
	fc.Result = res
	return ec.marshalNChinchiroGameTurn2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_chinchiroGameTurns(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGameTurn_id(ctx, field)
			case "dealer":
				return ec.fieldContext_ChinchiroGameTurn_dealer(ctx, field)
			case "nextRoller":
				return ec.fieldContext_ChinchiroGameTurn_nextRoller(ctx, field)
			case "status":
				return ec.fieldContext_ChinchiroGameTurn_status(ctx, field)
			case "turnNumber":
				return ec.fieldContext_ChinchiroGameTurn_turnNumber(ctx, field)
			case "rolls":
				return ec.fieldContext_ChinchiroGameTurn_rolls(ctx, field)
			case "results":
				return ec.fieldContext_ChinchiroGameTurn_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGameTurn", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_chinchiroGameTurns_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_chinchiroGameTurn(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_chinchiroGameTurn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChinchiroGameTurn(rctx, fc.Args["turnId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroGameTurn)
	fc.Result = res
	return ec.marshalOChinchiroGameTurn2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurn(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_chinchiroGameTurn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGameTurn_id(ctx, field)
			case "dealer":
				return ec.fieldContext_ChinchiroGameTurn_dealer(ctx, field)
			case "nextRoller":
				return ec.fieldContext_ChinchiroGameTurn_nextRoller(ctx, field)
			case "status":
				return ec.fieldContext_ChinchiroGameTurn_status(ctx, field)
			case "turnNumber":
				return ec.fieldContext_ChinchiroGameTurn_turnNumber(ctx, field)
			case "rolls":
				return ec.fieldContext_ChinchiroGameTurn_rolls(ctx, field)
			case "results":
				return ec.fieldContext_ChinchiroGameTurn_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGameTurn", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_chinchiroGameTurn_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_chinchiroGameTurnRolls(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_chinchiroGameTurnRolls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChinchiroGameTurnRolls(rctx, fc.Args["query"].(*gqlmodel.ChinchiroGameTurnRollsQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.ChinchiroGameTurnParticipantRoll)
	fc.Result = res
	return ec.marshalNChinchiroGameTurnParticipantRoll2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnParticipantRollᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_chinchiroGameTurnRolls(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGameTurnParticipantRoll_id(ctx, field)
			case "turn":
				return ec.fieldContext_ChinchiroGameTurnParticipantRoll_turn(ctx, field)
			case "participant":
				return ec.fieldContext_ChinchiroGameTurnParticipantRoll_participant(ctx, field)
			case "rollNumber":
				return ec.fieldContext_ChinchiroGameTurnParticipantRoll_rollNumber(ctx, field)
			case "dice1":
				return ec.fieldContext_ChinchiroGameTurnParticipantRoll_dice1(ctx, field)
			case "dice2":
				return ec.fieldContext_ChinchiroGameTurnParticipantRoll_dice2(ctx, field)
			case "dice3":
				return ec.fieldContext_ChinchiroGameTurnParticipantRoll_dice3(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGameTurnParticipantRoll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_chinchiroGameTurnRolls_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_chinchiroGameTurnParticipantResults(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_chinchiroGameTurnParticipantResults(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChinchiroGameTurnParticipantResults(rctx, fc.Args["query"].(gqlmodel.ChinchiroGameTurnParticipantResultsQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.ChinchiroGameTurnParticipantResult)
	fc.Result = res
	return ec.marshalNChinchiroGameTurnParticipantResult2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnParticipantResultᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_chinchiroGameTurnParticipantResults(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_id(ctx, field)
			case "turn":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_turn(ctx, field)
			case "participant":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_participant(ctx, field)
			case "dice1":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_dice1(ctx, field)
			case "dice2":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_dice2(ctx, field)
			case "dice3":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_dice3(ctx, field)
			case "combination":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_combination(ctx, field)
			case "winnings":
				return ec.fieldContext_ChinchiroGameTurnParticipantResult_winnings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGameTurnParticipantResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_chinchiroGameTurnParticipantResults_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterChinchiroGamePayload_chinchiroGame(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterChinchiroGamePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterChinchiroGamePayload_chinchiroGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChinchiroGame, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroGame)
	fc.Result = res
	return ec.marshalNChinchiroGame2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterChinchiroGamePayload_chinchiroGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterChinchiroGamePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroGame_id(ctx, field)
			case "status":
				return ec.fieldContext_ChinchiroGame_status(ctx, field)
			case "participants":
				return ec.fieldContext_ChinchiroGame_participants(ctx, field)
			case "turns":
				return ec.fieldContext_ChinchiroGame_turns(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroGame", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterChinchiroRoomMasterPayload_chinchiroRoomMaster(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterChinchiroRoomMasterPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterChinchiroRoomMasterPayload_chinchiroRoomMaster(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChinchiroRoomMaster, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroRoomMaster)
	fc.Result = res
	return ec.marshalNChinchiroRoomMaster2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomMaster(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterChinchiroRoomMasterPayload_chinchiroRoomMaster(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterChinchiroRoomMasterPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroRoomMaster_id(ctx, field)
			case "player":
				return ec.fieldContext_ChinchiroRoomMaster_player(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroRoomMaster", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterChinchiroRoomParticipantPayload_chinchiroRoomParticipant(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterChinchiroRoomParticipantPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterChinchiroRoomParticipantPayload_chinchiroRoomParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChinchiroRoomParticipant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroRoomParticipant)
	fc.Result = res
	return ec.marshalNChinchiroRoomParticipant2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterChinchiroRoomParticipantPayload_chinchiroRoomParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterChinchiroRoomParticipantPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroRoomParticipant_id(ctx, field)
			case "name":
				return ec.fieldContext_ChinchiroRoomParticipant_name(ctx, field)
			case "player":
				return ec.fieldContext_ChinchiroRoomParticipant_player(ctx, field)
			case "isGone":
				return ec.fieldContext_ChinchiroRoomParticipant_isGone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroRoomParticipant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterChinchiroRoomPayload_chinchiroRoom(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterChinchiroRoomPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterChinchiroRoomPayload_chinchiroRoom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChinchiroRoom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroRoom)
	fc.Result = res
	return ec.marshalNChinchiroRoom2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoom(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterChinchiroRoomPayload_chinchiroRoom(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterChinchiroRoomPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChinchiroRoom_id(ctx, field)
			case "name":
				return ec.fieldContext_ChinchiroRoom_name(ctx, field)
			case "status":
				return ec.fieldContext_ChinchiroRoom_status(ctx, field)
			case "roomMasters":
				return ec.fieldContext_ChinchiroRoom_roomMasters(ctx, field)
			case "participants":
				return ec.fieldContext_ChinchiroRoom_participants(ctx, field)
			case "games":
				return ec.fieldContext_ChinchiroRoom_games(ctx, field)
			case "settings":
				return ec.fieldContext_ChinchiroRoom_settings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroRoom", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RollChinchiroGameTurnParticipantPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RollChinchiroGameTurnParticipantPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RollChinchiroGameTurnParticipantPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RollChinchiroGameTurnParticipantPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RollChinchiroGameTurnParticipantPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SimpleChinchiroRoom_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SimpleChinchiroRoom) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SimpleChinchiroRoom_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SimpleChinchiroRoom_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SimpleChinchiroRoom",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SimpleChinchiroRoom_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SimpleChinchiroRoom) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SimpleChinchiroRoom_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SimpleChinchiroRoom_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SimpleChinchiroRoom",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SimpleChinchiroRoom_status(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SimpleChinchiroRoom) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SimpleChinchiroRoom_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.ChinchiroRoomStatus)
	fc.Result = res
	return ec.marshalNChinchiroRoomStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SimpleChinchiroRoom_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SimpleChinchiroRoom",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ChinchiroRoomStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SimpleChinchiroRoom_participantCounts(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SimpleChinchiroRoom) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SimpleChinchiroRoom_participantCounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantCounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SimpleChinchiroRoom_participantCounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SimpleChinchiroRoom",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SimpleChinchiroRoom_settings(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SimpleChinchiroRoom) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SimpleChinchiroRoom_settings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChinchiroRoomSettings)
	fc.Result = res
	return ec.marshalNChinchiroRoomSettings2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SimpleChinchiroRoom_settings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SimpleChinchiroRoom",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dummy":
				return ec.fieldContext_ChinchiroRoomSettings_dummy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChinchiroRoomSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateChinchiroGameTurnStatusPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UpdateChinchiroGameTurnStatusPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateChinchiroGameTurnStatusPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateChinchiroGameTurnStatusPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateChinchiroGameTurnStatusPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateChinchiroRoomParticipantPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UpdateChinchiroRoomParticipantPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateChinchiroRoomParticipantPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateChinchiroRoomParticipantPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateChinchiroRoomParticipantPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateChinchiroRoomSettingsPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UpdateChinchiroRoomSettingsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateChinchiroRoomSettingsPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateChinchiroRoomSettingsPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateChinchiroRoomSettingsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateChinchiroRoomStatusPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UpdateChinchiroRoomStatusPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateChinchiroRoomStatusPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateChinchiroRoomStatusPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateChinchiroRoomStatusPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBetChinchiroGameTurnParticipant(ctx context.Context, obj interface{}) (gqlmodel.BetChinchiroGameTurnParticipant, error) {
	var it gqlmodel.BetChinchiroGameTurnParticipant
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"turnId", "betAmount"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "turnId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("turnId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TurnID = data
		case "betAmount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("betAmount"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.BetAmount = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChinchiroGameTurnParticipantResultsQuery(ctx context.Context, obj interface{}) (gqlmodel.ChinchiroGameTurnParticipantResultsQuery, error) {
	var it gqlmodel.ChinchiroGameTurnParticipantResultsQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "turnId", "paging"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ids = data
		case "turnId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("turnId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TurnID = data
		case "paging":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
			data, err := ec.unmarshalOPageableQuery2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx, v)
			if err != nil {
				return it, err
			}
			it.Paging = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChinchiroGameTurnRollsQuery(ctx context.Context, obj interface{}) (gqlmodel.ChinchiroGameTurnRollsQuery, error) {
	var it gqlmodel.ChinchiroGameTurnRollsQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "turnId", "paging"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ids = data
		case "turnId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("turnId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TurnID = data
		case "paging":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
			data, err := ec.unmarshalOPageableQuery2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx, v)
			if err != nil {
				return it, err
			}
			it.Paging = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChinchiroGameTurnsQuery(ctx context.Context, obj interface{}) (gqlmodel.ChinchiroGameTurnsQuery, error) {
	var it gqlmodel.ChinchiroGameTurnsQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "gameId", "statuses", "paging"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ids = data
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "statuses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statuses"))
			data, err := ec.unmarshalOChinchiroGameTurnStatus2ᚕwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Statuses = data
		case "paging":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
			data, err := ec.unmarshalOPageableQuery2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx, v)
			if err != nil {
				return it, err
			}
			it.Paging = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChinchiroGamesQuery(ctx context.Context, obj interface{}) (gqlmodel.ChinchiroGamesQuery, error) {
	var it gqlmodel.ChinchiroGamesQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "roomId", "name", "statuses", "paging"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ids = data
		case "roomId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roomId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoomID = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "statuses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statuses"))
			data, err := ec.unmarshalOChinchiroGameStatus2ᚕwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Statuses = data
		case "paging":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
			data, err := ec.unmarshalOPageableQuery2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx, v)
			if err != nil {
				return it, err
			}
			it.Paging = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChinchiroRoomsQuery(ctx context.Context, obj interface{}) (gqlmodel.ChinchiroRoomsQuery, error) {
	var it gqlmodel.ChinchiroRoomsQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "name", "statuses", "paging"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ids = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "statuses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statuses"))
			data, err := ec.unmarshalOChinchiroRoomStatus2ᚕwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Statuses = data
		case "paging":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
			data, err := ec.unmarshalOPageableQuery2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx, v)
			if err != nil {
				return it, err
			}
			it.Paging = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteChinchiroRoomMaster(ctx context.Context, obj interface{}) (gqlmodel.DeleteChinchiroRoomMaster, error) {
	var it gqlmodel.DeleteChinchiroRoomMaster
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"roomID", "masterId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "roomID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roomID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoomID = data
		case "masterId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("masterId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MasterID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteChinchiroRoomParticipant(ctx context.Context, obj interface{}) (gqlmodel.DeleteChinchiroRoomParticipant, error) {
	var it gqlmodel.DeleteChinchiroRoomParticipant
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"roomId", "participantId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "roomId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roomId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoomID = data
		case "participantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participantId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParticipantID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLeaveChinchiroRoom(ctx context.Context, obj interface{}) (gqlmodel.LeaveChinchiroRoom, error) {
	var it gqlmodel.LeaveChinchiroRoom
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"roomId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "roomId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roomId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoomID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewChinchiroGame(ctx context.Context, obj interface{}) (gqlmodel.NewChinchiroGame, error) {
	var it gqlmodel.NewChinchiroGame
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"roomId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "roomId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roomId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoomID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewChinchiroRoom(ctx context.Context, obj interface{}) (gqlmodel.NewChinchiroRoom, error) {
	var it gqlmodel.NewChinchiroRoom
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewChinchiroRoomMaster(ctx context.Context, obj interface{}) (gqlmodel.NewChinchiroRoomMaster, error) {
	var it gqlmodel.NewChinchiroRoomMaster
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"roomId", "playerId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "roomId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roomId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoomID = data
		case "playerId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("playerId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlayerID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewChinchiroRoomParticipant(ctx context.Context, obj interface{}) (gqlmodel.NewChinchiroRoomParticipant, error) {
	var it gqlmodel.NewChinchiroRoomParticipant
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"roomId", "name", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "roomId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roomId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoomID = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPageableQuery(ctx context.Context, obj interface{}) (gqlmodel.PageableQuery, error) {
	var it gqlmodel.PageableQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pageSize", "pageNumber", "isDesc", "isLatest"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pageSize":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "pageNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageNumber"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageNumber = data
		case "isDesc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDesc"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDesc = data
		case "isLatest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isLatest"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsLatest = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlayersQuery(ctx context.Context, obj interface{}) (gqlmodel.PlayersQuery, error) {
	var it gqlmodel.PlayersQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "name", "paging"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ids = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "paging":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
			data, err := ec.unmarshalOPageableQuery2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx, v)
			if err != nil {
				return it, err
			}
			it.Paging = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRollChinchiroGameTurnParticipant(ctx context.Context, obj interface{}) (gqlmodel.RollChinchiroGameTurnParticipant, error) {
	var it gqlmodel.RollChinchiroGameTurnParticipant
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"turnId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "turnId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("turnId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TurnID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateChinchiroGameTurnStatus(ctx context.Context, obj interface{}) (gqlmodel.UpdateChinchiroGameTurnStatus, error) {
	var it gqlmodel.UpdateChinchiroGameTurnStatus
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"turnId", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "turnId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("turnId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TurnID = data
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNChinchiroGameTurnStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateChinchiroRoomParticipant(ctx context.Context, obj interface{}) (gqlmodel.UpdateChinchiroRoomParticipant, error) {
	var it gqlmodel.UpdateChinchiroRoomParticipant
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"roomId", "participantId", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "roomId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roomId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoomID = data
		case "participantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participantId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParticipantID = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateChinchiroRoomSettings(ctx context.Context, obj interface{}) (gqlmodel.UpdateChinchiroRoomSettings, error) {
	var it gqlmodel.UpdateChinchiroRoomSettings
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"roomId", "dummy"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "roomId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roomId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoomID = data
		case "dummy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dummy"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Dummy = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateChinchiroRoomStatus(ctx context.Context, obj interface{}) (gqlmodel.UpdateChinchiroRoomStatus, error) {
	var it gqlmodel.UpdateChinchiroRoomStatus
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"roomId", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "roomId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roomId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoomID = data
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNChinchiroRoomStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Pageable(ctx context.Context, sel ast.SelectionSet, obj gqlmodel.Pageable) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var betChinchiroGameTurnParticipantPayloadImplementors = []string{"BetChinchiroGameTurnParticipantPayload"}

func (ec *executionContext) _BetChinchiroGameTurnParticipantPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.BetChinchiroGameTurnParticipantPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, betChinchiroGameTurnParticipantPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BetChinchiroGameTurnParticipantPayload")
		case "ok":
			out.Values[i] = ec._BetChinchiroGameTurnParticipantPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chinchiroGameImplementors = []string{"ChinchiroGame"}

func (ec *executionContext) _ChinchiroGame(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChinchiroGame) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chinchiroGameImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChinchiroGame")
		case "id":
			out.Values[i] = ec._ChinchiroGame_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._ChinchiroGame_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "participants":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroGame_participants(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "turns":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroGame_turns(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chinchiroGameParticipantImplementors = []string{"ChinchiroGameParticipant"}

func (ec *executionContext) _ChinchiroGameParticipant(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChinchiroGameParticipant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chinchiroGameParticipantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChinchiroGameParticipant")
		case "id":
			out.Values[i] = ec._ChinchiroGameParticipant_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "roomParticipant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroGameParticipant_roomParticipant(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "balance":
			out.Values[i] = ec._ChinchiroGameParticipant_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "turnOrder":
			out.Values[i] = ec._ChinchiroGameParticipant_turnOrder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chinchiroGameTurnImplementors = []string{"ChinchiroGameTurn"}

func (ec *executionContext) _ChinchiroGameTurn(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChinchiroGameTurn) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chinchiroGameTurnImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChinchiroGameTurn")
		case "id":
			out.Values[i] = ec._ChinchiroGameTurn_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "dealer":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroGameTurn_dealer(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "nextRoller":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroGameTurn_nextRoller(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "status":
			out.Values[i] = ec._ChinchiroGameTurn_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "turnNumber":
			out.Values[i] = ec._ChinchiroGameTurn_turnNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "rolls":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroGameTurn_rolls(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "results":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroGameTurn_results(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chinchiroGameTurnParticipantResultImplementors = []string{"ChinchiroGameTurnParticipantResult"}

func (ec *executionContext) _ChinchiroGameTurnParticipantResult(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChinchiroGameTurnParticipantResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chinchiroGameTurnParticipantResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChinchiroGameTurnParticipantResult")
		case "id":
			out.Values[i] = ec._ChinchiroGameTurnParticipantResult_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "turn":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroGameTurnParticipantResult_turn(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "participant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroGameTurnParticipantResult_participant(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "dice1":
			out.Values[i] = ec._ChinchiroGameTurnParticipantResult_dice1(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "dice2":
			out.Values[i] = ec._ChinchiroGameTurnParticipantResult_dice2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "dice3":
			out.Values[i] = ec._ChinchiroGameTurnParticipantResult_dice3(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "combination":
			out.Values[i] = ec._ChinchiroGameTurnParticipantResult_combination(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "winnings":
			out.Values[i] = ec._ChinchiroGameTurnParticipantResult_winnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chinchiroGameTurnParticipantRollImplementors = []string{"ChinchiroGameTurnParticipantRoll"}

func (ec *executionContext) _ChinchiroGameTurnParticipantRoll(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChinchiroGameTurnParticipantRoll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chinchiroGameTurnParticipantRollImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChinchiroGameTurnParticipantRoll")
		case "id":
			out.Values[i] = ec._ChinchiroGameTurnParticipantRoll_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "turn":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroGameTurnParticipantRoll_turn(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "participant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroGameTurnParticipantRoll_participant(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "rollNumber":
			out.Values[i] = ec._ChinchiroGameTurnParticipantRoll_rollNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "dice1":
			out.Values[i] = ec._ChinchiroGameTurnParticipantRoll_dice1(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "dice2":
			out.Values[i] = ec._ChinchiroGameTurnParticipantRoll_dice2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "dice3":
			out.Values[i] = ec._ChinchiroGameTurnParticipantRoll_dice3(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chinchiroRoomImplementors = []string{"ChinchiroRoom"}

func (ec *executionContext) _ChinchiroRoom(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChinchiroRoom) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chinchiroRoomImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChinchiroRoom")
		case "id":
			out.Values[i] = ec._ChinchiroRoom_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._ChinchiroRoom_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._ChinchiroRoom_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "roomMasters":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroRoom_roomMasters(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "participants":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroRoom_participants(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "games":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroRoom_games(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "settings":
			out.Values[i] = ec._ChinchiroRoom_settings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chinchiroRoomMasterImplementors = []string{"ChinchiroRoomMaster"}

func (ec *executionContext) _ChinchiroRoomMaster(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChinchiroRoomMaster) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chinchiroRoomMasterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChinchiroRoomMaster")
		case "id":
			out.Values[i] = ec._ChinchiroRoomMaster_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "player":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroRoomMaster_player(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chinchiroRoomParticipantImplementors = []string{"ChinchiroRoomParticipant"}

func (ec *executionContext) _ChinchiroRoomParticipant(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChinchiroRoomParticipant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chinchiroRoomParticipantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChinchiroRoomParticipant")
		case "id":
			out.Values[i] = ec._ChinchiroRoomParticipant_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._ChinchiroRoomParticipant_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "player":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChinchiroRoomParticipant_player(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isGone":
			out.Values[i] = ec._ChinchiroRoomParticipant_isGone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chinchiroRoomSettingsImplementors = []string{"ChinchiroRoomSettings"}

func (ec *executionContext) _ChinchiroRoomSettings(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChinchiroRoomSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chinchiroRoomSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChinchiroRoomSettings")
		case "dummy":
			out.Values[i] = ec._ChinchiroRoomSettings_dummy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteChinchiroRoomMasterPayloadImplementors = []string{"DeleteChinchiroRoomMasterPayload"}

func (ec *executionContext) _DeleteChinchiroRoomMasterPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DeleteChinchiroRoomMasterPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteChinchiroRoomMasterPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteChinchiroRoomMasterPayload")
		case "ok":
			out.Values[i] = ec._DeleteChinchiroRoomMasterPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteChinchiroRoomParticipantPayloadImplementors = []string{"DeleteChinchiroRoomParticipantPayload"}

func (ec *executionContext) _DeleteChinchiroRoomParticipantPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DeleteChinchiroRoomParticipantPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteChinchiroRoomParticipantPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteChinchiroRoomParticipantPayload")
		case "ok":
			out.Values[i] = ec._DeleteChinchiroRoomParticipantPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var leaveChinchiroRoomPayloadImplementors = []string{"LeaveChinchiroRoomPayload"}

func (ec *executionContext) _LeaveChinchiroRoomPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.LeaveChinchiroRoomPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, leaveChinchiroRoomPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LeaveChinchiroRoomPayload")
		case "ok":
			out.Values[i] = ec._LeaveChinchiroRoomPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "registerChinchiroRoom":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerChinchiroRoom(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerChinchiroRoomMaster":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerChinchiroRoomMaster(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteChinchiroRoomMaster":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteChinchiroRoomMaster(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateChinchiroRoomStatus":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateChinchiroRoomStatus(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateChinchiroRoomSettings":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateChinchiroRoomSettings(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerChinchiroRoomParticipant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerChinchiroRoomParticipant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateChinchiroRoomParticipant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateChinchiroRoomParticipant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "leaveChinchiroRoom":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_leaveChinchiroRoom(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteChinchiroRoomParticipant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteChinchiroRoomParticipant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerChinchiroGame":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerChinchiroGame(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateChinchiroGameTurnStatus":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateChinchiroGameTurnStatus(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "betChinchiroGameTurnParticipant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_betChinchiroGameTurnParticipant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rollChinchiroGameTurnParticipant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rollChinchiroGameTurnParticipant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var playerImplementors = []string{"Player"}

func (ec *executionContext) _Player(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Player) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, playerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Player")
		case "id":
			out.Values[i] = ec._Player_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Player_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "authorityCodes":
			out.Values[i] = ec._Player_authorityCodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "players":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_players(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "player":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_player(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "myPlayer":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myPlayer(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "chinchiroRooms":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_chinchiroRooms(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "chinchiroRoom":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_chinchiroRoom(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "myChinchiroRoomParticipant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myChinchiroRoomParticipant(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "chinchiroGames":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_chinchiroGames(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "chinchiroGame":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_chinchiroGame(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "myChinchiroGameParticipant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myChinchiroGameParticipant(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "chinchiroGameTurns":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_chinchiroGameTurns(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "chinchiroGameTurn":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_chinchiroGameTurn(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "chinchiroGameTurnRolls":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_chinchiroGameTurnRolls(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "chinchiroGameTurnParticipantResults":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_chinchiroGameTurnParticipantResults(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerChinchiroGamePayloadImplementors = []string{"RegisterChinchiroGamePayload"}

func (ec *executionContext) _RegisterChinchiroGamePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterChinchiroGamePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerChinchiroGamePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterChinchiroGamePayload")
		case "chinchiroGame":
			out.Values[i] = ec._RegisterChinchiroGamePayload_chinchiroGame(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerChinchiroRoomMasterPayloadImplementors = []string{"RegisterChinchiroRoomMasterPayload"}

func (ec *executionContext) _RegisterChinchiroRoomMasterPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterChinchiroRoomMasterPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerChinchiroRoomMasterPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterChinchiroRoomMasterPayload")
		case "chinchiroRoomMaster":
			out.Values[i] = ec._RegisterChinchiroRoomMasterPayload_chinchiroRoomMaster(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerChinchiroRoomParticipantPayloadImplementors = []string{"RegisterChinchiroRoomParticipantPayload"}

func (ec *executionContext) _RegisterChinchiroRoomParticipantPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterChinchiroRoomParticipantPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerChinchiroRoomParticipantPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterChinchiroRoomParticipantPayload")
		case "chinchiroRoomParticipant":
			out.Values[i] = ec._RegisterChinchiroRoomParticipantPayload_chinchiroRoomParticipant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerChinchiroRoomPayloadImplementors = []string{"RegisterChinchiroRoomPayload"}

func (ec *executionContext) _RegisterChinchiroRoomPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterChinchiroRoomPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerChinchiroRoomPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterChinchiroRoomPayload")
		case "chinchiroRoom":
			out.Values[i] = ec._RegisterChinchiroRoomPayload_chinchiroRoom(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rollChinchiroGameTurnParticipantPayloadImplementors = []string{"RollChinchiroGameTurnParticipantPayload"}

func (ec *executionContext) _RollChinchiroGameTurnParticipantPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RollChinchiroGameTurnParticipantPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rollChinchiroGameTurnParticipantPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RollChinchiroGameTurnParticipantPayload")
		case "ok":
			out.Values[i] = ec._RollChinchiroGameTurnParticipantPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var simpleChinchiroRoomImplementors = []string{"SimpleChinchiroRoom"}

func (ec *executionContext) _SimpleChinchiroRoom(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.SimpleChinchiroRoom) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, simpleChinchiroRoomImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SimpleChinchiroRoom")
		case "id":
			out.Values[i] = ec._SimpleChinchiroRoom_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._SimpleChinchiroRoom_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._SimpleChinchiroRoom_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "participantCounts":
			out.Values[i] = ec._SimpleChinchiroRoom_participantCounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "settings":
			out.Values[i] = ec._SimpleChinchiroRoom_settings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateChinchiroGameTurnStatusPayloadImplementors = []string{"UpdateChinchiroGameTurnStatusPayload"}

func (ec *executionContext) _UpdateChinchiroGameTurnStatusPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UpdateChinchiroGameTurnStatusPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateChinchiroGameTurnStatusPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateChinchiroGameTurnStatusPayload")
		case "ok":
			out.Values[i] = ec._UpdateChinchiroGameTurnStatusPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateChinchiroRoomParticipantPayloadImplementors = []string{"UpdateChinchiroRoomParticipantPayload"}

func (ec *executionContext) _UpdateChinchiroRoomParticipantPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UpdateChinchiroRoomParticipantPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateChinchiroRoomParticipantPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateChinchiroRoomParticipantPayload")
		case "ok":
			out.Values[i] = ec._UpdateChinchiroRoomParticipantPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateChinchiroRoomSettingsPayloadImplementors = []string{"UpdateChinchiroRoomSettingsPayload"}

func (ec *executionContext) _UpdateChinchiroRoomSettingsPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UpdateChinchiroRoomSettingsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateChinchiroRoomSettingsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateChinchiroRoomSettingsPayload")
		case "ok":
			out.Values[i] = ec._UpdateChinchiroRoomSettingsPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateChinchiroRoomStatusPayloadImplementors = []string{"UpdateChinchiroRoomStatusPayload"}

func (ec *executionContext) _UpdateChinchiroRoomStatusPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UpdateChinchiroRoomStatusPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateChinchiroRoomStatusPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateChinchiroRoomStatusPayload")
		case "ok":
			out.Values[i] = ec._UpdateChinchiroRoomStatusPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBetChinchiroGameTurnParticipant2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐBetChinchiroGameTurnParticipant(ctx context.Context, v interface{}) (gqlmodel.BetChinchiroGameTurnParticipant, error) {
	res, err := ec.unmarshalInputBetChinchiroGameTurnParticipant(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBetChinchiroGameTurnParticipantPayload2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐBetChinchiroGameTurnParticipantPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.BetChinchiroGameTurnParticipantPayload) graphql.Marshaler {
	return ec._BetChinchiroGameTurnParticipantPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNBetChinchiroGameTurnParticipantPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐBetChinchiroGameTurnParticipantPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.BetChinchiroGameTurnParticipantPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BetChinchiroGameTurnParticipantPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNChinchiroCombination2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroCombination(ctx context.Context, v interface{}) (gqlmodel.ChinchiroCombination, error) {
	var res gqlmodel.ChinchiroCombination
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNChinchiroCombination2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroCombination(ctx context.Context, sel ast.SelectionSet, v gqlmodel.ChinchiroCombination) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNChinchiroGame2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.ChinchiroGame) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChinchiroGame2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGame(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChinchiroGame2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGame(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChinchiroGame) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChinchiroGame(ctx, sel, v)
}

func (ec *executionContext) marshalNChinchiroGameParticipant2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameParticipant(ctx context.Context, sel ast.SelectionSet, v gqlmodel.ChinchiroGameParticipant) graphql.Marshaler {
	return ec._ChinchiroGameParticipant(ctx, sel, &v)
}

func (ec *executionContext) marshalNChinchiroGameParticipant2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameParticipantᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.ChinchiroGameParticipant) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChinchiroGameParticipant2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameParticipant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChinchiroGameParticipant2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameParticipant(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChinchiroGameParticipant) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChinchiroGameParticipant(ctx, sel, v)
}

func (ec *executionContext) unmarshalNChinchiroGameStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameStatus(ctx context.Context, v interface{}) (gqlmodel.ChinchiroGameStatus, error) {
	var res gqlmodel.ChinchiroGameStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNChinchiroGameStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameStatus(ctx context.Context, sel ast.SelectionSet, v gqlmodel.ChinchiroGameStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNChinchiroGameTurn2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurn(ctx context.Context, sel ast.SelectionSet, v gqlmodel.ChinchiroGameTurn) graphql.Marshaler {
	return ec._ChinchiroGameTurn(ctx, sel, &v)
}

func (ec *executionContext) marshalNChinchiroGameTurn2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.ChinchiroGameTurn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChinchiroGameTurn2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChinchiroGameTurn2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurn(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChinchiroGameTurn) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChinchiroGameTurn(ctx, sel, v)
}

func (ec *executionContext) marshalNChinchiroGameTurnParticipantResult2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnParticipantResultᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.ChinchiroGameTurnParticipantResult) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChinchiroGameTurnParticipantResult2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnParticipantResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChinchiroGameTurnParticipantResult2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnParticipantResult(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChinchiroGameTurnParticipantResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChinchiroGameTurnParticipantResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNChinchiroGameTurnParticipantResultsQuery2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnParticipantResultsQuery(ctx context.Context, v interface{}) (gqlmodel.ChinchiroGameTurnParticipantResultsQuery, error) {
	res, err := ec.unmarshalInputChinchiroGameTurnParticipantResultsQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNChinchiroGameTurnParticipantRoll2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnParticipantRollᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.ChinchiroGameTurnParticipantRoll) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChinchiroGameTurnParticipantRoll2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnParticipantRoll(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChinchiroGameTurnParticipantRoll2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnParticipantRoll(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChinchiroGameTurnParticipantRoll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChinchiroGameTurnParticipantRoll(ctx, sel, v)
}

func (ec *executionContext) unmarshalNChinchiroGameTurnStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnStatus(ctx context.Context, v interface{}) (gqlmodel.ChinchiroGameTurnStatus, error) {
	var res gqlmodel.ChinchiroGameTurnStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNChinchiroGameTurnStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnStatus(ctx context.Context, sel ast.SelectionSet, v gqlmodel.ChinchiroGameTurnStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNChinchiroGameTurnsQuery2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnsQuery(ctx context.Context, v interface{}) (gqlmodel.ChinchiroGameTurnsQuery, error) {
	res, err := ec.unmarshalInputChinchiroGameTurnsQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNChinchiroGamesQuery2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGamesQuery(ctx context.Context, v interface{}) (gqlmodel.ChinchiroGamesQuery, error) {
	res, err := ec.unmarshalInputChinchiroGamesQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNChinchiroRoom2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoom(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChinchiroRoom) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChinchiroRoom(ctx, sel, v)
}

func (ec *executionContext) marshalNChinchiroRoomMaster2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomMasterᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.ChinchiroRoomMaster) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChinchiroRoomMaster2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomMaster(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChinchiroRoomMaster2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomMaster(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChinchiroRoomMaster) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChinchiroRoomMaster(ctx, sel, v)
}

func (ec *executionContext) marshalNChinchiroRoomParticipant2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomParticipant(ctx context.Context, sel ast.SelectionSet, v gqlmodel.ChinchiroRoomParticipant) graphql.Marshaler {
	return ec._ChinchiroRoomParticipant(ctx, sel, &v)
}

func (ec *executionContext) marshalNChinchiroRoomParticipant2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomParticipantᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.ChinchiroRoomParticipant) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChinchiroRoomParticipant2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomParticipant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChinchiroRoomParticipant2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomParticipant(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChinchiroRoomParticipant) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChinchiroRoomParticipant(ctx, sel, v)
}

func (ec *executionContext) marshalNChinchiroRoomSettings2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomSettings(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChinchiroRoomSettings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChinchiroRoomSettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNChinchiroRoomStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomStatus(ctx context.Context, v interface{}) (gqlmodel.ChinchiroRoomStatus, error) {
	var res gqlmodel.ChinchiroRoomStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNChinchiroRoomStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomStatus(ctx context.Context, sel ast.SelectionSet, v gqlmodel.ChinchiroRoomStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNChinchiroRoomsQuery2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomsQuery(ctx context.Context, v interface{}) (gqlmodel.ChinchiroRoomsQuery, error) {
	res, err := ec.unmarshalInputChinchiroRoomsQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteChinchiroRoomMaster2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteChinchiroRoomMaster(ctx context.Context, v interface{}) (gqlmodel.DeleteChinchiroRoomMaster, error) {
	res, err := ec.unmarshalInputDeleteChinchiroRoomMaster(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeleteChinchiroRoomMasterPayload2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteChinchiroRoomMasterPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DeleteChinchiroRoomMasterPayload) graphql.Marshaler {
	return ec._DeleteChinchiroRoomMasterPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteChinchiroRoomMasterPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteChinchiroRoomMasterPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DeleteChinchiroRoomMasterPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteChinchiroRoomMasterPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteChinchiroRoomParticipant2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteChinchiroRoomParticipant(ctx context.Context, v interface{}) (gqlmodel.DeleteChinchiroRoomParticipant, error) {
	res, err := ec.unmarshalInputDeleteChinchiroRoomParticipant(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeleteChinchiroRoomParticipantPayload2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteChinchiroRoomParticipantPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DeleteChinchiroRoomParticipantPayload) graphql.Marshaler {
	return ec._DeleteChinchiroRoomParticipantPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteChinchiroRoomParticipantPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteChinchiroRoomParticipantPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DeleteChinchiroRoomParticipantPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteChinchiroRoomParticipantPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNLeaveChinchiroRoom2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐLeaveChinchiroRoom(ctx context.Context, v interface{}) (gqlmodel.LeaveChinchiroRoom, error) {
	res, err := ec.unmarshalInputLeaveChinchiroRoom(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLeaveChinchiroRoomPayload2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐLeaveChinchiroRoomPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.LeaveChinchiroRoomPayload) graphql.Marshaler {
	return ec._LeaveChinchiroRoomPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLeaveChinchiroRoomPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐLeaveChinchiroRoomPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.LeaveChinchiroRoomPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LeaveChinchiroRoomPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNewChinchiroGame2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐNewChinchiroGame(ctx context.Context, v interface{}) (gqlmodel.NewChinchiroGame, error) {
	res, err := ec.unmarshalInputNewChinchiroGame(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewChinchiroRoom2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐNewChinchiroRoom(ctx context.Context, v interface{}) (gqlmodel.NewChinchiroRoom, error) {
	res, err := ec.unmarshalInputNewChinchiroRoom(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewChinchiroRoomMaster2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐNewChinchiroRoomMaster(ctx context.Context, v interface{}) (gqlmodel.NewChinchiroRoomMaster, error) {
	res, err := ec.unmarshalInputNewChinchiroRoomMaster(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewChinchiroRoomParticipant2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐNewChinchiroRoomParticipant(ctx context.Context, v interface{}) (gqlmodel.NewChinchiroRoomParticipant, error) {
	res, err := ec.unmarshalInputNewChinchiroRoomParticipant(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlayer2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx context.Context, sel ast.SelectionSet, v gqlmodel.Player) graphql.Marshaler {
	return ec._Player(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlayer2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayerᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.Player) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlayer2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlayer2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Player) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Player(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlayersQuery2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayersQuery(ctx context.Context, v interface{}) (gqlmodel.PlayersQuery, error) {
	res, err := ec.unmarshalInputPlayersQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRegisterChinchiroGamePayload2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterChinchiroGamePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterChinchiroGamePayload) graphql.Marshaler {
	return ec._RegisterChinchiroGamePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterChinchiroGamePayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterChinchiroGamePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterChinchiroGamePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterChinchiroGamePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterChinchiroRoomMasterPayload2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterChinchiroRoomMasterPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterChinchiroRoomMasterPayload) graphql.Marshaler {
	return ec._RegisterChinchiroRoomMasterPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterChinchiroRoomMasterPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterChinchiroRoomMasterPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterChinchiroRoomMasterPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterChinchiroRoomMasterPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterChinchiroRoomParticipantPayload2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterChinchiroRoomParticipantPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterChinchiroRoomParticipantPayload) graphql.Marshaler {
	return ec._RegisterChinchiroRoomParticipantPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterChinchiroRoomParticipantPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterChinchiroRoomParticipantPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterChinchiroRoomParticipantPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterChinchiroRoomParticipantPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterChinchiroRoomPayload2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterChinchiroRoomPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterChinchiroRoomPayload) graphql.Marshaler {
	return ec._RegisterChinchiroRoomPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterChinchiroRoomPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterChinchiroRoomPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterChinchiroRoomPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterChinchiroRoomPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRollChinchiroGameTurnParticipant2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRollChinchiroGameTurnParticipant(ctx context.Context, v interface{}) (gqlmodel.RollChinchiroGameTurnParticipant, error) {
	res, err := ec.unmarshalInputRollChinchiroGameTurnParticipant(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRollChinchiroGameTurnParticipantPayload2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRollChinchiroGameTurnParticipantPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RollChinchiroGameTurnParticipantPayload) graphql.Marshaler {
	return ec._RollChinchiroGameTurnParticipantPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRollChinchiroGameTurnParticipantPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐRollChinchiroGameTurnParticipantPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RollChinchiroGameTurnParticipantPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RollChinchiroGameTurnParticipantPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNSimpleChinchiroRoom2ᚕᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐSimpleChinchiroRoomᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.SimpleChinchiroRoom) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSimpleChinchiroRoom2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐSimpleChinchiroRoom(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSimpleChinchiroRoom2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐSimpleChinchiroRoom(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.SimpleChinchiroRoom) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SimpleChinchiroRoom(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNUpdateChinchiroGameTurnStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroGameTurnStatus(ctx context.Context, v interface{}) (gqlmodel.UpdateChinchiroGameTurnStatus, error) {
	res, err := ec.unmarshalInputUpdateChinchiroGameTurnStatus(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateChinchiroGameTurnStatusPayload2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroGameTurnStatusPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UpdateChinchiroGameTurnStatusPayload) graphql.Marshaler {
	return ec._UpdateChinchiroGameTurnStatusPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateChinchiroGameTurnStatusPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroGameTurnStatusPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UpdateChinchiroGameTurnStatusPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateChinchiroGameTurnStatusPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateChinchiroRoomParticipant2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroRoomParticipant(ctx context.Context, v interface{}) (gqlmodel.UpdateChinchiroRoomParticipant, error) {
	res, err := ec.unmarshalInputUpdateChinchiroRoomParticipant(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateChinchiroRoomParticipantPayload2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroRoomParticipantPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UpdateChinchiroRoomParticipantPayload) graphql.Marshaler {
	return ec._UpdateChinchiroRoomParticipantPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateChinchiroRoomParticipantPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroRoomParticipantPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UpdateChinchiroRoomParticipantPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateChinchiroRoomParticipantPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateChinchiroRoomSettings2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroRoomSettings(ctx context.Context, v interface{}) (gqlmodel.UpdateChinchiroRoomSettings, error) {
	res, err := ec.unmarshalInputUpdateChinchiroRoomSettings(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateChinchiroRoomSettingsPayload2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroRoomSettingsPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UpdateChinchiroRoomSettingsPayload) graphql.Marshaler {
	return ec._UpdateChinchiroRoomSettingsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateChinchiroRoomSettingsPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroRoomSettingsPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UpdateChinchiroRoomSettingsPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateChinchiroRoomSettingsPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateChinchiroRoomStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroRoomStatus(ctx context.Context, v interface{}) (gqlmodel.UpdateChinchiroRoomStatus, error) {
	res, err := ec.unmarshalInputUpdateChinchiroRoomStatus(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateChinchiroRoomStatusPayload2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroRoomStatusPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UpdateChinchiroRoomStatusPayload) graphql.Marshaler {
	return ec._UpdateChinchiroRoomStatusPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateChinchiroRoomStatusPayload2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateChinchiroRoomStatusPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UpdateChinchiroRoomStatusPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateChinchiroRoomStatusPayload(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOChinchiroGame2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGame(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChinchiroGame) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChinchiroGame(ctx, sel, v)
}

func (ec *executionContext) marshalOChinchiroGameParticipant2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameParticipant(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChinchiroGameParticipant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChinchiroGameParticipant(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChinchiroGameStatus2ᚕwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameStatusᚄ(ctx context.Context, v interface{}) ([]gqlmodel.ChinchiroGameStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]gqlmodel.ChinchiroGameStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNChinchiroGameStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOChinchiroGameStatus2ᚕwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.ChinchiroGameStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChinchiroGameStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOChinchiroGameTurn2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurn(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChinchiroGameTurn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChinchiroGameTurn(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChinchiroGameTurnRollsQuery2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnRollsQuery(ctx context.Context, v interface{}) (*gqlmodel.ChinchiroGameTurnRollsQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChinchiroGameTurnRollsQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOChinchiroGameTurnStatus2ᚕwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnStatusᚄ(ctx context.Context, v interface{}) ([]gqlmodel.ChinchiroGameTurnStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]gqlmodel.ChinchiroGameTurnStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNChinchiroGameTurnStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOChinchiroGameTurnStatus2ᚕwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.ChinchiroGameTurnStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChinchiroGameTurnStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroGameTurnStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOChinchiroRoom2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoom(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChinchiroRoom) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChinchiroRoom(ctx, sel, v)
}

func (ec *executionContext) marshalOChinchiroRoomParticipant2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomParticipant(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChinchiroRoomParticipant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChinchiroRoomParticipant(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChinchiroRoomStatus2ᚕwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomStatusᚄ(ctx context.Context, v interface{}) ([]gqlmodel.ChinchiroRoomStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]gqlmodel.ChinchiroRoomStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNChinchiroRoomStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOChinchiroRoomStatus2ᚕwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.ChinchiroRoomStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChinchiroRoomStatus2wolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐChinchiroRoomStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOPageableQuery2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx context.Context, v interface{}) (*gqlmodel.PageableQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPageableQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPlayer2ᚖwolfortᚑgamesᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Player) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Player(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
