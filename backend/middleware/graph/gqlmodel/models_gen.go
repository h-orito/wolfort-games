// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodel

import (
	"fmt"
	"io"
	"strconv"
)

type Pageable interface {
	IsPageable()
	GetAllPageCount() int
	GetHasPrePage() bool
	GetHasNextPage() bool
	GetCurrentPageNumber() *int
	GetIsDesc() bool
}

type BetChinchiroGameTurnParticipant struct {
	TurnID    string `json:"turnId"`
	BetAmount int    `json:"betAmount"`
}

type BetChinchiroGameTurnParticipantPayload struct {
	Ok bool `json:"ok"`
}

type ChinchiroGame struct {
	ID           string                      `json:"id"`
	Status       ChinchiroGameStatus         `json:"status"`
	Participants []*ChinchiroGameParticipant `json:"participants"`
	Turns        []*ChinchiroGameTurn        `json:"turns"`
}

type ChinchiroGameTurnParticipantResultsQuery struct {
	Ids    []string       `json:"ids,omitempty"`
	TurnID *string        `json:"turnId,omitempty"`
	Paging *PageableQuery `json:"paging,omitempty"`
}

type ChinchiroGameTurnRollsQuery struct {
	Ids    []string       `json:"ids,omitempty"`
	TurnID *string        `json:"turnId,omitempty"`
	Paging *PageableQuery `json:"paging,omitempty"`
}

type ChinchiroGameTurnsQuery struct {
	Ids      []string                  `json:"ids,omitempty"`
	GameID   *string                   `json:"gameId,omitempty"`
	Statuses []ChinchiroGameTurnStatus `json:"statuses,omitempty"`
	Paging   *PageableQuery            `json:"paging,omitempty"`
}

type ChinchiroGamesQuery struct {
	Ids      []string              `json:"ids,omitempty"`
	RoomID   *string               `json:"roomId,omitempty"`
	Name     *string               `json:"name,omitempty"`
	Statuses []ChinchiroGameStatus `json:"statuses,omitempty"`
	Paging   *PageableQuery        `json:"paging,omitempty"`
}

type ChinchiroRoomSettings struct {
	Dummy string `json:"dummy"`
}

type ChinchiroRoomsQuery struct {
	Ids      []string              `json:"ids,omitempty"`
	Name     *string               `json:"name,omitempty"`
	Statuses []ChinchiroRoomStatus `json:"statuses,omitempty"`
	Paging   *PageableQuery        `json:"paging,omitempty"`
}

type DeleteChinchiroGameParticipant struct {
	GameID        string `json:"gameId"`
	ParticipantID string `json:"participantId"`
}

type DeleteChinchiroGameParticipantPayload struct {
	Ok bool `json:"ok"`
}

type DeleteChinchiroRoomMaster struct {
	RoomID   string `json:"roomID"`
	MasterID string `json:"masterId"`
}

type DeleteChinchiroRoomMasterPayload struct {
	Ok bool `json:"ok"`
}

type DeleteChinchiroRoomParticipant struct {
	RoomID        string `json:"roomId"`
	ParticipantID string `json:"participantId"`
}

type DeleteChinchiroRoomParticipantPayload struct {
	Ok bool `json:"ok"`
}

type LeaveChinchiroRoom struct {
	RoomID string `json:"roomId"`
}

type LeaveChinchiroRoomPayload struct {
	Ok bool `json:"ok"`
}

type NewChinchiroGame struct {
	RoomID string `json:"roomId"`
}

type NewChinchiroGameParticipant struct {
	GameID string `json:"gameId"`
}

type NewChinchiroGameTurn struct {
	GameID string `json:"gameId"`
}

type NewChinchiroRoom struct {
	Name string `json:"name"`
}

type NewChinchiroRoomMaster struct {
	RoomID   string `json:"roomId"`
	PlayerID string `json:"playerId"`
}

type NewChinchiroRoomParticipant struct {
	RoomID   string  `json:"roomId"`
	Name     string  `json:"name"`
	Password *string `json:"password,omitempty"`
}

type PageableQuery struct {
	PageSize   int  `json:"pageSize"`
	PageNumber int  `json:"pageNumber"`
	IsDesc     bool `json:"isDesc"`
	IsLatest   bool `json:"isLatest"`
}

type Player struct {
	ID             string   `json:"id"`
	Name           string   `json:"name"`
	AuthorityCodes []string `json:"authorityCodes"`
}

type PlayersQuery struct {
	Ids    []string       `json:"ids,omitempty"`
	Name   *string        `json:"name,omitempty"`
	Paging *PageableQuery `json:"paging,omitempty"`
}

type RegisterChinchiroGameParticipantPayload struct {
	ChinchiroGameParticipant *ChinchiroGameParticipant `json:"chinchiroGameParticipant"`
}

type RegisterChinchiroGamePayload struct {
	ChinchiroGame *ChinchiroGame `json:"chinchiroGame"`
}

type RegisterChinchiroGameTurnPayload struct {
	ChinchiroGameTurn *ChinchiroGameTurn `json:"chinchiroGameTurn"`
}

type RegisterChinchiroRoomMasterPayload struct {
	ChinchiroRoomMaster *ChinchiroRoomMaster `json:"chinchiroRoomMaster"`
}

type RegisterChinchiroRoomParticipantPayload struct {
	ChinchiroRoomParticipant *ChinchiroRoomParticipant `json:"chinchiroRoomParticipant"`
}

type RegisterChinchiroRoomPayload struct {
	ChinchiroRoom *ChinchiroRoom `json:"chinchiroRoom"`
}

type RollChinchiroGameTurnParticipant struct {
	TurnID string `json:"turnId"`
}

type RollChinchiroGameTurnParticipantPayload struct {
	Ok bool `json:"ok"`
}

type SimpleChinchiroRoom struct {
	ID                string                 `json:"id"`
	Name              string                 `json:"name"`
	Status            ChinchiroRoomStatus    `json:"status"`
	ParticipantCounts int                    `json:"participantCounts"`
	Settings          *ChinchiroRoomSettings `json:"settings"`
}

type UpdateChinchiroGameParticipantPayload struct {
	Ok bool `json:"ok"`
}

type UpdateChinchiroGameTurnStatus struct {
	TurnID string                  `json:"turnId"`
	Status ChinchiroGameTurnStatus `json:"status"`
}

type UpdateChinchiroGameTurnStatusPayload struct {
	Ok bool `json:"ok"`
}

type UpdateChinchiroRoomParticipant struct {
	RoomID        string `json:"roomId"`
	ParticipantID string `json:"participantId"`
	Name          string `json:"name"`
}

type UpdateChinchiroRoomParticipantPayload struct {
	Ok bool `json:"ok"`
}

type UpdateChinchiroRoomSettings struct {
	RoomID string `json:"roomId"`
	Dummy  string `json:"dummy"`
}

type UpdateChinchiroRoomSettingsPayload struct {
	Ok bool `json:"ok"`
}

type UpdateChinchiroRoomStatus struct {
	RoomID string              `json:"roomId"`
	Status ChinchiroRoomStatus `json:"status"`
}

type UpdateChinchiroRoomStatusPayload struct {
	Ok bool `json:"ok"`
}

type ChinchiroCombination string

const (
	ChinchiroCombinationHifumi   ChinchiroCombination = "Hifumi"
	ChinchiroCombinationMenashi  ChinchiroCombination = "Menashi"
	ChinchiroCombinationIchinome ChinchiroCombination = "Ichinome"
	ChinchiroCombinationNinome   ChinchiroCombination = "Ninome"
	ChinchiroCombinationSannome  ChinchiroCombination = "Sannome"
	ChinchiroCombinationYonnome  ChinchiroCombination = "Yonnome"
	ChinchiroCombinationGonome   ChinchiroCombination = "Gonome"
	ChinchiroCombinationRokunome ChinchiroCombination = "Rokunome"
	ChinchiroCombinationPinzoro  ChinchiroCombination = "Pinzoro"
	ChinchiroCombinationNizoro   ChinchiroCombination = "Nizoro"
	ChinchiroCombinationSanzoro  ChinchiroCombination = "Sanzoro"
	ChinchiroCombinationYonzoro  ChinchiroCombination = "Yonzoro"
	ChinchiroCombinationGozoro   ChinchiroCombination = "Gozoro"
	ChinchiroCombinationRokuzoro ChinchiroCombination = "Rokuzoro"
	ChinchiroCombinationShigoro  ChinchiroCombination = "Shigoro"
)

var AllChinchiroCombination = []ChinchiroCombination{
	ChinchiroCombinationHifumi,
	ChinchiroCombinationMenashi,
	ChinchiroCombinationIchinome,
	ChinchiroCombinationNinome,
	ChinchiroCombinationSannome,
	ChinchiroCombinationYonnome,
	ChinchiroCombinationGonome,
	ChinchiroCombinationRokunome,
	ChinchiroCombinationPinzoro,
	ChinchiroCombinationNizoro,
	ChinchiroCombinationSanzoro,
	ChinchiroCombinationYonzoro,
	ChinchiroCombinationGozoro,
	ChinchiroCombinationRokuzoro,
	ChinchiroCombinationShigoro,
}

func (e ChinchiroCombination) IsValid() bool {
	switch e {
	case ChinchiroCombinationHifumi, ChinchiroCombinationMenashi, ChinchiroCombinationIchinome, ChinchiroCombinationNinome, ChinchiroCombinationSannome, ChinchiroCombinationYonnome, ChinchiroCombinationGonome, ChinchiroCombinationRokunome, ChinchiroCombinationPinzoro, ChinchiroCombinationNizoro, ChinchiroCombinationSanzoro, ChinchiroCombinationYonzoro, ChinchiroCombinationGozoro, ChinchiroCombinationRokuzoro, ChinchiroCombinationShigoro:
		return true
	}
	return false
}

func (e ChinchiroCombination) String() string {
	return string(e)
}

func (e *ChinchiroCombination) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChinchiroCombination(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChinchiroCombination", str)
	}
	return nil
}

func (e ChinchiroCombination) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ChinchiroGameStatus string

const (
	ChinchiroGameStatusProgress ChinchiroGameStatus = "Progress"
	ChinchiroGameStatusFinished ChinchiroGameStatus = "Finished"
)

var AllChinchiroGameStatus = []ChinchiroGameStatus{
	ChinchiroGameStatusProgress,
	ChinchiroGameStatusFinished,
}

func (e ChinchiroGameStatus) IsValid() bool {
	switch e {
	case ChinchiroGameStatusProgress, ChinchiroGameStatusFinished:
		return true
	}
	return false
}

func (e ChinchiroGameStatus) String() string {
	return string(e)
}

func (e *ChinchiroGameStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChinchiroGameStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChinchiroGameStatus", str)
	}
	return nil
}

func (e ChinchiroGameStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ChinchiroGameTurnStatus string

const (
	ChinchiroGameTurnStatusBetting  ChinchiroGameTurnStatus = "Betting"
	ChinchiroGameTurnStatusRolling  ChinchiroGameTurnStatus = "Rolling"
	ChinchiroGameTurnStatusFinished ChinchiroGameTurnStatus = "Finished"
)

var AllChinchiroGameTurnStatus = []ChinchiroGameTurnStatus{
	ChinchiroGameTurnStatusBetting,
	ChinchiroGameTurnStatusRolling,
	ChinchiroGameTurnStatusFinished,
}

func (e ChinchiroGameTurnStatus) IsValid() bool {
	switch e {
	case ChinchiroGameTurnStatusBetting, ChinchiroGameTurnStatusRolling, ChinchiroGameTurnStatusFinished:
		return true
	}
	return false
}

func (e ChinchiroGameTurnStatus) String() string {
	return string(e)
}

func (e *ChinchiroGameTurnStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChinchiroGameTurnStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChinchiroGameTurnStatus", str)
	}
	return nil
}

func (e ChinchiroGameTurnStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ChinchiroRoomStatus string

const (
	ChinchiroRoomStatusOpened   ChinchiroRoomStatus = "Opened"
	ChinchiroRoomStatusFinished ChinchiroRoomStatus = "Finished"
)

var AllChinchiroRoomStatus = []ChinchiroRoomStatus{
	ChinchiroRoomStatusOpened,
	ChinchiroRoomStatusFinished,
}

func (e ChinchiroRoomStatus) IsValid() bool {
	switch e {
	case ChinchiroRoomStatusOpened, ChinchiroRoomStatusFinished:
		return true
	}
	return false
}

func (e ChinchiroRoomStatus) String() string {
	return string(e)
}

func (e *ChinchiroRoomStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChinchiroRoomStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChinchiroRoomStatus", str)
	}
	return nil
}

func (e ChinchiroRoomStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
